
Yellow_Bill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e00  08005e00  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e04  08005e04  00006e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  08005e70  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005e70  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd73  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cd  00000000  00000000  00014e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00016fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0e  00000000  00000000  00017e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175b8  00000000  00000000  00018916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ed3  00000000  00000000  0002fece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f83f  00000000  00000000  00040da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d05e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  000d0624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d4bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005be0 	.word	0x08005be0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005be0 	.word	0x08005be0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BLDC_T200_PWM_Init>:
 */

#include "BLDC_interface.h"

/***/
void BLDC_T200_PWM_Init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <BLDC_T200_PWM_Init+0x38>)
 8000578:	f004 f89e 	bl	80046b8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800057c:	2108      	movs	r1, #8
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <BLDC_T200_PWM_Init+0x3c>)
 8000580:	f003 fcea 	bl	8003f58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	480a      	ldr	r0, [pc, #40]	@ (80005b0 <BLDC_T200_PWM_Init+0x40>)
 8000588:	f003 fce6 	bl	8003f58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800058c:	2104      	movs	r1, #4
 800058e:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <BLDC_T200_PWM_Init+0x40>)
 8000590:	f003 fce2 	bl	8003f58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000594:	2108      	movs	r1, #8
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <BLDC_T200_PWM_Init+0x40>)
 8000598:	f003 fcde 	bl	8003f58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800059c:	210c      	movs	r1, #12
 800059e:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <BLDC_T200_PWM_Init+0x40>)
 80005a0:	f003 fcda 	bl	8003f58 <HAL_TIM_PWM_Start>

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000108 	.word	0x20000108
 80005ac:	20000150 	.word	0x20000150
 80005b0:	20000198 	.word	0x20000198

080005b4 <BLDC_T200_Init>:
void BLDC_T200_Init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1502);
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <BLDC_T200_Init+0x4c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1502);
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <BLDC_T200_Init+0x50>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005ca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1502);
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <BLDC_T200_Init+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1502);
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <BLDC_T200_Init+0x50>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005de:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 1502);
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <BLDC_T200_Init+0x50>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 1502);
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <BLDC_T200_Init+0x54>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f240 52de 	movw	r2, #1502	@ 0x5de
 80005f2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_Delay(4000);
 80005f4:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80005f8:	f000 fdfa 	bl	80011f0 <HAL_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000150 	.word	0x20000150
 8000604:	20000198 	.word	0x20000198
 8000608:	20000108 	.word	0x20000108

0800060c <BLDC_T200_SetMotor>:
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 1502);
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 1502);

}

void BLDC_T200_SetMotor(uint8_t MotorChannel, uint16_t usSpeed){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	80bb      	strh	r3, [r7, #4]
	if((usSpeed < 1000)|| (usSpeed > 2000)){
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000622:	d33a      	bcc.n	800069a <BLDC_T200_SetMotor+0x8e>
 8000624:	88bb      	ldrh	r3, [r7, #4]
 8000626:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800062a:	d836      	bhi.n	800069a <BLDC_T200_SetMotor+0x8e>
		/*Log Warning : Wrong microsecond speed */
	}else{
		switch (MotorChannel){
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b05      	cmp	r3, #5
 8000630:	d832      	bhi.n	8000698 <BLDC_T200_SetMotor+0x8c>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <BLDC_T200_SetMotor+0x2c>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000651 	.word	0x08000651
 800063c:	0800065d 	.word	0x0800065d
 8000640:	08000669 	.word	0x08000669
 8000644:	08000675 	.word	0x08000675
 8000648:	08000681 	.word	0x08000681
 800064c:	0800068d 	.word	0x0800068d
			case 0:
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,usSpeed+2);
 8000650:	88bb      	ldrh	r3, [r7, #4]
 8000652:	1c9a      	adds	r2, r3, #2
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <BLDC_T200_SetMotor+0x9c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 800065a:	e01e      	b.n	800069a <BLDC_T200_SetMotor+0x8e>
			case 1:
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, usSpeed+2);
 800065c:	88bb      	ldrh	r3, [r7, #4]
 800065e:	1c9a      	adds	r2, r3, #2
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <BLDC_T200_SetMotor+0xa0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	63da      	str	r2, [r3, #60]	@ 0x3c
				break;
 8000666:	e018      	b.n	800069a <BLDC_T200_SetMotor+0x8e>
			case 2:
				 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, usSpeed+2);
 8000668:	88bb      	ldrh	r3, [r7, #4]
 800066a:	1c9a      	adds	r2, r3, #2
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <BLDC_T200_SetMotor+0xa4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8000672:	e012      	b.n	800069a <BLDC_T200_SetMotor+0x8e>
			case 3:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,usSpeed+2);
 8000674:	88bb      	ldrh	r3, [r7, #4]
 8000676:	1c9a      	adds	r2, r3, #2
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <BLDC_T200_SetMotor+0xa4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38
				break;
 800067e:	e00c      	b.n	800069a <BLDC_T200_SetMotor+0x8e>
			case 4:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,usSpeed+2);
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	1c9a      	adds	r2, r3, #2
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <BLDC_T200_SetMotor+0xa4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	63da      	str	r2, [r3, #60]	@ 0x3c
				break;
 800068a:	e006      	b.n	800069a <BLDC_T200_SetMotor+0x8e>
			case 5:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,usSpeed+2);
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	1c9a      	adds	r2, r3, #2
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <BLDC_T200_SetMotor+0xa4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	641a      	str	r2, [r3, #64]	@ 0x40
				break;
 8000696:	e000      	b.n	800069a <BLDC_T200_SetMotor+0x8e>

			default:
				/*Log Warning : Wrong MotorChannel */
				break;
 8000698:	bf00      	nop
		}

	}

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000108 	.word	0x20000108
 80006ac:	20000150 	.word	0x20000150
 80006b0:	20000198 	.word	0x20000198

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd28 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f828 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fa14 	bl	8000aec <MX_GPIO_Init>
  MX_TIM3_Init();
 80006c4:	f000 f998 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80006c8:	f000 f93e 	bl	8000948 <MX_TIM2_Init>
  MX_TIM1_Init();
 80006cc:	f000 f8b8 	bl	8000840 <MX_TIM1_Init>
  MX_I2C1_Init();
 80006d0:	f000 f888 	bl	80007e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  BLDC_T200_PWM_Init();
//  BLDC_T200_Init();

  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <main+0x50>)
 80006d6:	f001 fab1 	bl	8001c3c <HAL_I2C_EnableListen_IT>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <main+0x30>
	  Error_Handler();
 80006e0:	f000 fa56 	bl	8000b90 <Error_Handler>
  }
  BLDC_T200_PWM_Init();
 80006e4:	f7ff ff44 	bl	8000570 <BLDC_T200_PWM_Init>
  BLDC_T200_Init();
 80006e8:	f7ff ff64 	bl	80005b4 <BLDC_T200_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	BLDC_T200_SetMotor(Channel_Received_Rasp, usPulse_Speed_Received_Rasp);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <main+0x54>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <main+0x58>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4610      	mov	r0, r2
 80006fa:	f7ff ff87 	bl	800060c <BLDC_T200_SetMotor>
  {
 80006fe:	bf00      	nop
 8000700:	e7f4      	b.n	80006ec <main+0x38>
 8000702:	bf00      	nop
 8000704:	20000084 	.word	0x20000084
 8000708:	200001e0 	.word	0x200001e0
 800070c:	200001e2 	.word	0x200001e2

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	@ 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fb67 	bl	8004df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a27      	ldr	r2, [pc, #156]	@ (80007dc <SystemClock_Config+0xcc>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800075c:	4a20      	ldr	r2, [pc, #128]	@ (80007e0 <SystemClock_Config+0xd0>)
 800075e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f002 ff49 	bl	8003630 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a4:	f000 f9f4 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007b0:	2390      	movs	r3, #144	@ 0x90
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 f9ac 	bl	8003b20 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ce:	f000 f9df 	bl	8000b90 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3750      	adds	r7, #80	@ 0x50
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 1 */


  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <MX_I2C1_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C1_Init+0x50>)
 80007f0:	4a12      	ldr	r2, [pc, #72]	@ (800083c <MX_I2C1_Init+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_I2C1_Init+0x50>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_I2C1_Init+0x50>)
 8000802:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_I2C1_Init+0x50>)
 8000822:	f001 f803 	bl	800182c <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f9b0 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000084 	.word	0x20000084
 8000838:	40005400 	.word	0x40005400
 800083c:	000186a0 	.word	0x000186a0

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b092      	sub	sp, #72	@ 0x48
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fac1 	bl	8004df2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000872:	4a34      	ldr	r2, [pc, #208]	@ (8000944 <MX_TIM1_Init+0x104>)
 8000874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000878:	220f      	movs	r2, #15
 800087a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <MX_TIM1_Init+0x100>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000882:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000884:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <MX_TIM1_Init+0x100>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089c:	4828      	ldr	r0, [pc, #160]	@ (8000940 <MX_TIM1_Init+0x100>)
 800089e:	f003 fb0b 	bl	8003eb8 <HAL_TIM_PWM_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008a8:	f000 f972 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008b8:	4619      	mov	r1, r3
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <MX_TIM1_Init+0x100>)
 80008bc:	f003 ffa8 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80008c6:	f000 f963 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008da:	2304      	movs	r3, #4
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4814      	ldr	r0, [pc, #80]	@ (8000940 <MX_TIM1_Init+0x100>)
 80008f0:	f003 fbe2 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008fa:	f000 f949 	bl	8000b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000922:	f003 ffe3 	bl	80048ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800092c:	f000 f930 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <MX_TIM1_Init+0x100>)
 8000932:	f000 f9ff 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3748      	adds	r7, #72	@ 0x48
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000108 	.word	0x20000108
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096a:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <MX_TIM2_Init+0xac>)
 800096c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <MX_TIM2_Init+0xac>)
 8000974:	220f      	movs	r2, #15
 8000976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <MX_TIM2_Init+0xac>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_TIM2_Init+0xac>)
 8000980:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_TIM2_Init+0xac>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_TIM2_Init+0xac>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <MX_TIM2_Init+0xac>)
 8000994:	f003 fa90 	bl	8003eb8 <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800099e:	f000 f8f7 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4619      	mov	r1, r3
 80009b0:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <MX_TIM2_Init+0xac>)
 80009b2:	f003 ff2d 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009bc:	f000 f8e8 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	@ 0x60
 80009c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2208      	movs	r2, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <MX_TIM2_Init+0xac>)
 80009d8:	f003 fb6e 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009e2:	f000 f8d5 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e6:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <MX_TIM2_Init+0xac>)
 80009e8:	f000 f9a4 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000150 	.word	0x20000150

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ae8 <MX_TIM3_Init+0xf0>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a22:	220f      	movs	r2, #15
 8000a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a2e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a40:	4828      	ldr	r0, [pc, #160]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a42:	f003 fa39 	bl	8003eb8 <HAL_TIM_PWM_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f8a0 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4821      	ldr	r0, [pc, #132]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a60:	f003 fed6 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a6a:	f000 f891 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a86:	f003 fb17 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a90:	f000 f87e 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2204      	movs	r2, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000a9c:	f003 fb0c 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 f873 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2208      	movs	r2, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000ab2:	f003 fb01 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000abc:	f000 f868 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000ac8:	f003 faf6 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000ad2:	f000 f85d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <MX_TIM3_Init+0xec>)
 8000ad8:	f000 f92c 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000198 	.word	0x20000198
 8000ae8:	40000400 	.word	0x40000400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a18      	ldr	r2, [pc, #96]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_GPIO_Init+0x9c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <MX_GPIO_Init+0xa0>)
 8000b5e:	f000 fe31 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_GPIO_Init+0xa0>)
 8000b7c:	f000 fc9e 	bl	80014bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020800 	.word	0x40020800

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <HAL_I2C_MspInit+0xa4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d13c      	bne.n	8000c88 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a1f      	ldr	r2, [pc, #124]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c2a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <HAL_I2C_MspInit+0xac>)
 8000c48:	f000 fc38 	bl	80014bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <HAL_I2C_MspInit+0xa8>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	201f      	movs	r0, #31
 8000c6e:	f000 fbbe 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c72:	201f      	movs	r0, #31
 8000c74:	f000 fbd7 	bl	8001426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2020      	movs	r0, #32
 8000c7e:	f000 fbb6 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c82:	2020      	movs	r0, #32
 8000c84:	f000 fbcf 	bl	8001426 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_TIM_PWM_MspInit+0x8c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10e      	bne.n	8000ccc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cca:	e026      	b.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd4:	d10e      	bne.n	8000cf4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
}
 8000cf2:	e012      	b.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x94>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x90>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
}
 8000d1a:	bf00      	nop
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40000400 	.word	0x40000400

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a46      	ldr	r2, [pc, #280]	@ (8000e6c <HAL_TIM_MspPostInit+0x138>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d11f      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
 8000d5a:	4b45      	ldr	r3, [pc, #276]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a44      	ldr	r2, [pc, #272]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b42      	ldr	r3, [pc, #264]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4839      	ldr	r0, [pc, #228]	@ (8000e74 <HAL_TIM_MspPostInit+0x140>)
 8000d90:	f000 fb94 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d94:	e065      	b.n	8000e62 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d9e:	d11f      	bne.n	8000de0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a31      	ldr	r2, [pc, #196]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4826      	ldr	r0, [pc, #152]	@ (8000e74 <HAL_TIM_MspPostInit+0x140>)
 8000dda:	f000 fb6f 	bl	80014bc <HAL_GPIO_Init>
}
 8000dde:	e040      	b.n	8000e62 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a24      	ldr	r2, [pc, #144]	@ (8000e78 <HAL_TIM_MspPostInit+0x144>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d13b      	bne.n	8000e62 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_TIM_MspPostInit+0x13c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e22:	23c0      	movs	r3, #192	@ 0xc0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <HAL_TIM_MspPostInit+0x148>)
 8000e3e:	f000 fb3d 	bl	80014bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_TIM_MspPostInit+0x140>)
 8000e5e:	f000 fb2d 	bl	80014bc <HAL_GPIO_Init>
}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	@ 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010000 	.word	0x40010000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f96b 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <I2C1_EV_IRQHandler+0x10>)
 8000ee6:	f000 fedf 	bl	8001ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000084 	.word	0x20000084

08000ef4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <I2C1_ER_IRQHandler+0x10>)
 8000efa:	f001 f828 	bl	8001f4e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000084 	.word	0x20000084

08000f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_kill>:

int _kill(int pid, int sig)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f22:	f004 f811 	bl	8004f48 <__errno>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2216      	movs	r2, #22
 8000f2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_exit>:

void _exit (int status)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ffe7 	bl	8000f18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f4a:	bf00      	nop
 8000f4c:	e7fd      	b.n	8000f4a <_exit+0x12>

08000f4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e00a      	b.n	8000f76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f60:	f3af 8000 	nop.w
 8000f64:	4601      	mov	r1, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	60ba      	str	r2, [r7, #8]
 8000f6c:	b2ca      	uxtb	r2, r1
 8000f6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbf0      	blt.n	8000f60 <_read+0x12>
  }

  return len;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e009      	b.n	8000fae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	60ba      	str	r2, [r7, #8]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbf1      	blt.n	8000f9a <_write+0x12>
  }
  return len;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_close>:

int _close(int file)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_isatty>:

int _isatty(int file)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f003 ff76 	bl	8004f48 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20010000 	.word	0x20010000
 8001088:	00000400 	.word	0x00000400
 800108c:	200001e4 	.word	0x200001e4
 8001090:	20000348 	.word	0x20000348

08001094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010bc:	f7ff ffea 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 ff35 	bl	8004f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fae3 	bl	80006b4 <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010fc:	08005e08 	.word	0x08005e08
  ldr r2, =_sbss
 8001100:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001104:	20000344 	.word	0x20000344

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <HAL_Init+0x40>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800111a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_Init+0x40>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <HAL_Init+0x40>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f94f 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	200f      	movs	r0, #15
 800113c:	f000 f808 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fd2c 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_InitTick+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_InitTick+0x58>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f967 	bl	8001442 <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f92f 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <HAL_InitTick+0x5c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_IncTick+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <HAL_IncTick+0x24>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	200001e8 	.word	0x200001e8

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <HAL_GetTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200001e8 	.word	0x200001e8

080011f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ffee 	bl	80011d8 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d005      	beq.n	8001216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_Delay+0x44>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001216:	bf00      	nop
 8001218:	f7ff ffde 	bl	80011d8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d8f7      	bhi.n	8001218 <HAL_Delay+0x28>
  {
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d004      	beq.n	8001478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2280      	movs	r2, #128	@ 0x80
 8001472:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e00c      	b.n	8001492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2205      	movs	r2, #5
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014ac:	b2db      	uxtb	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e159      	b.n	800178c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8148 	bne.w	8001786 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d005      	beq.n	800150e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	2b02      	cmp	r3, #2
 800150c:	d130      	bne.n	8001570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 0201 	and.w	r2, r3, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b03      	cmp	r3, #3
 800157a:	d017      	beq.n	80015ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d123      	bne.n	8001600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a2 	beq.w	8001786 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b57      	ldr	r3, [pc, #348]	@ (80017a4 <HAL_GPIO_Init+0x2e8>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a56      	ldr	r2, [pc, #344]	@ (80017a4 <HAL_GPIO_Init+0x2e8>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b54      	ldr	r3, [pc, #336]	@ (80017a4 <HAL_GPIO_Init+0x2e8>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <HAL_GPIO_Init+0x2ec>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a49      	ldr	r2, [pc, #292]	@ (80017ac <HAL_GPIO_Init+0x2f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x202>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a48      	ldr	r2, [pc, #288]	@ (80017b0 <HAL_GPIO_Init+0x2f4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x1fe>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a47      	ldr	r2, [pc, #284]	@ (80017b4 <HAL_GPIO_Init+0x2f8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x1fa>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a46      	ldr	r2, [pc, #280]	@ (80017b8 <HAL_GPIO_Init+0x2fc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x1f6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a45      	ldr	r2, [pc, #276]	@ (80017bc <HAL_GPIO_Init+0x300>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x1f2>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x204>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x204>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x204>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x204>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x204>
 80016be:	2300      	movs	r3, #0
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d0:	4935      	ldr	r1, [pc, #212]	@ (80017a8 <HAL_GPIO_Init+0x2ec>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016de:	4b38      	ldr	r3, [pc, #224]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001702:	4a2f      	ldr	r2, [pc, #188]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800172c:	4a24      	ldr	r2, [pc, #144]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001756:	4a1a      	ldr	r2, [pc, #104]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001780:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <HAL_GPIO_Init+0x304>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	f67f aea2 	bls.w	80014d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	041a      	lsls	r2, r3, #16
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43d9      	mvns	r1, r3
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	400b      	ands	r3, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	619a      	str	r2, [r3, #24]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e171      	b.n	8001b22 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d12c      	bne.n	80018a4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a77      	ldr	r2, [pc, #476]	@ (8001a34 <HAL_I2C_Init+0x208>)
 8001856:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a77      	ldr	r2, [pc, #476]	@ (8001a38 <HAL_I2C_Init+0x20c>)
 800185c:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a76      	ldr	r2, [pc, #472]	@ (8001a3c <HAL_I2C_Init+0x210>)
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a76      	ldr	r2, [pc, #472]	@ (8001a40 <HAL_I2C_Init+0x214>)
 8001868:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a75      	ldr	r2, [pc, #468]	@ (8001a44 <HAL_I2C_Init+0x218>)
 800186e:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a75      	ldr	r2, [pc, #468]	@ (8001a48 <HAL_I2C_Init+0x21c>)
 8001874:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a74      	ldr	r2, [pc, #464]	@ (8001a4c <HAL_I2C_Init+0x220>)
 800187a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a74      	ldr	r2, [pc, #464]	@ (8001a50 <HAL_I2C_Init+0x224>)
 8001880:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a73      	ldr	r2, [pc, #460]	@ (8001a54 <HAL_I2C_Init+0x228>)
 8001886:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a73      	ldr	r2, [pc, #460]	@ (8001a58 <HAL_I2C_Init+0x22c>)
 800188c:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a70      	ldr	r2, [pc, #448]	@ (8001a5c <HAL_I2C_Init+0x230>)
 800189a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018dc:	f002 fad8 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a60 <HAL_I2C_Init+0x234>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d807      	bhi.n	80018fc <HAL_I2C_Init+0xd0>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001a64 <HAL_I2C_Init+0x238>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e006      	b.n	800190a <HAL_I2C_Init+0xde>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001a68 <HAL_I2C_Init+0x23c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	bf94      	ite	ls
 8001904:	2301      	movls	r3, #1
 8001906:	2300      	movhi	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e107      	b.n	8001b22 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a55      	ldr	r2, [pc, #340]	@ (8001a6c <HAL_I2C_Init+0x240>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a47      	ldr	r2, [pc, #284]	@ (8001a60 <HAL_I2C_Init+0x234>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d802      	bhi.n	800194c <HAL_I2C_Init+0x120>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	e009      	b.n	8001960 <HAL_I2C_Init+0x134>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <HAL_I2C_Init+0x244>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	3301      	adds	r3, #1
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001972:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4939      	ldr	r1, [pc, #228]	@ (8001a60 <HAL_I2C_Init+0x234>)
 800197c:	428b      	cmp	r3, r1
 800197e:	d819      	bhi.n	80019b4 <HAL_I2C_Init+0x188>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e59      	subs	r1, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fbb1 f3f3 	udiv	r3, r1, r3
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001994:	400b      	ands	r3, r1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_I2C_Init+0x184>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e59      	subs	r1, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	e071      	b.n	8001a94 <HAL_I2C_Init+0x268>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e06f      	b.n	8001a94 <HAL_I2C_Init+0x268>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_I2C_Init+0x1b4>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e012      	b.n	8001a06 <HAL_I2C_Init+0x1da>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	0099      	lsls	r1, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x1e2>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e042      	b.n	8001a94 <HAL_I2C_Init+0x268>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d12e      	bne.n	8001a74 <HAL_I2C_Init+0x248>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a32:	e02f      	b.n	8001a94 <HAL_I2C_Init+0x268>
 8001a34:	0800208d 	.word	0x0800208d
 8001a38:	080020a1 	.word	0x080020a1
 8001a3c:	080020b5 	.word	0x080020b5
 8001a40:	08004a85 	.word	0x08004a85
 8001a44:	08004a31 	.word	0x08004a31
 8001a48:	080020c9 	.word	0x080020c9
 8001a4c:	080020dd 	.word	0x080020dd
 8001a50:	08004ac1 	.word	0x08004ac1
 8001a54:	080020f1 	.word	0x080020f1
 8001a58:	08004a49 	.word	0x08004a49
 8001a5c:	08000bed 	.word	0x08000bed
 8001a60:	000186a0 	.word	0x000186a0
 8001a64:	001e847f 	.word	0x001e847f
 8001a68:	003d08ff 	.word	0x003d08ff
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	10624dd3 	.word	0x10624dd3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	0099      	lsls	r1, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6809      	ldr	r1, [r1, #0]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ac2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6911      	ldr	r1, [r2, #16]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop

08001b2c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3e:	2b80      	cmp	r3, #128	@ 0x80
 8001b40:	d103      	bne.n	8001b4a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b087      	sub	sp, #28
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b72:	2b28      	cmp	r3, #40	@ 0x28
 8001b74:	d15b      	bne.n	8001c2e <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e054      	b.n	8001c30 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e04d      	b.n	8001c30 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d007      	beq.n	8001bba <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	222a      	movs	r2, #42	@ 0x2a
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001c28:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d124      	bne.n	8001c9a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2228      	movs	r2, #40	@ 0x28
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d007      	beq.n	8001c76 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c84:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001c94:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d003      	beq.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x38>
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b40      	cmp	r3, #64	@ 0x40
 8001cdc:	f040 80b1 	bne.w	8001e42 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_I2C_EV_IRQHandler+0x6e>
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001d00:	d003      	beq.n	8001d0a <HAL_I2C_EV_IRQHandler+0x62>
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001d08:	d101      	bne.n	8001d0e <HAL_I2C_EV_IRQHandler+0x66>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_I2C_EV_IRQHandler+0x68>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f000 8114 	beq.w	8001f3e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <HAL_I2C_EV_IRQHandler+0x90>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 fc64 	bl	80035f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fd5b 	bl	80027ec <I2C_Master_SB>
 8001d36:	e083      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_I2C_EV_IRQHandler+0xac>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fdd3 	bl	80028f8 <I2C_Master_ADD10>
 8001d52:	e075      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_I2C_EV_IRQHandler+0xc8>
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fdef 	bl	800294c <I2C_Master_ADDR>
 8001d6e:	e067      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d036      	beq.n	8001de8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d88:	f000 80db 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0x10a>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0x10a>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9aa 	bl	8002104 <I2C_MasterTransmit_TXE>
 8001db0:	e046      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80c2 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80bc 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	2b21      	cmp	r3, #33	@ 0x21
 8001dce:	d103      	bne.n	8001dd8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fa36 	bl	8002242 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd6:	e0b4      	b.n	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b40      	cmp	r3, #64	@ 0x40
 8001ddc:	f040 80b1 	bne.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 faa7 	bl	8002334 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de6:	e0ac      	b.n	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001df6:	f000 80a4 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <HAL_I2C_EV_IRQHandler+0x178>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_I2C_EV_IRQHandler+0x178>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fb24 	bl	8002466 <I2C_MasterReceive_RXNE>
 8001e1e:	e00f      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 808b 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8085 	beq.w	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fbe0 	bl	80025fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3e:	e080      	b.n	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
 8001e40:	e07f      	b.n	8001f42 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e007      	b.n	8001e64 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d011      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 ffaf 	bl	8002dee <I2C_Slave_ADDR>
 8001e90:	e05a      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x206>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 ffea 	bl	8002e80 <I2C_Slave_STOPF>
 8001eac:	e04c      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	2b21      	cmp	r3, #33	@ 0x21
 8001eb2:	d002      	beq.n	8001eba <HAL_I2C_EV_IRQHandler+0x212>
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	2b29      	cmp	r3, #41	@ 0x29
 8001eb8:	d120      	bne.n	8001efc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x238>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x238>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d103      	bne.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fec8 	bl	8002c6e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ede:	e032      	b.n	8001f46 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02d      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0x29e>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d028      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fef8 	bl	8002cea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001efa:	e024      	b.n	8001f46 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0x27a>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0x27a>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 ff06 	bl	8002d2c <I2C_SlaveReceive_RXNE>
 8001f20:	e012      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 ff37 	bl	8002daa <I2C_SlaveReceive_BTF>
 8001f3c:	e004      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001f3e:	bf00      	nop
 8001f40:	e002      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	bf00      	nop
 8001f44:	e000      	b.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f46:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b08a      	sub	sp, #40	@ 0x28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f70:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00d      	beq.n	8001f98 <HAL_I2C_ER_IRQHandler+0x4a>
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_I2C_ER_IRQHandler+0x70>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001fbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03e      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0xf8>
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d039      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001fd2:	7efb      	ldrb	r3, [r7, #27]
 8001fd4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fec:	7ebb      	ldrb	r3, [r7, #26]
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d112      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xca>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xca>
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	2b21      	cmp	r3, #33	@ 0x21
 8001ffc:	d008      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	2b29      	cmp	r3, #41	@ 0x29
 8002002:	d005      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0xc2>
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	2b28      	cmp	r3, #40	@ 0x28
 8002008:	d106      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b21      	cmp	r3, #33	@ 0x21
 800200e:	d103      	bne.n	8002018 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 f869 	bl	80030e8 <I2C_Slave_AF>
 8002016:	e016      	b.n	8002046 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002020:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800202a:	7efb      	ldrb	r3, [r7, #27]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d002      	beq.n	8002036 <HAL_I2C_ER_IRQHandler+0xe8>
 8002030:	7efb      	ldrb	r3, [r7, #27]
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d107      	bne.n	8002046 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002044:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x11e>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800206a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f001 f8a8 	bl	80031d4 <I2C_ITError>
  }
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002112:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800211a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d153      	bne.n	80021d2 <I2C_MasterTransmit_TXE+0xce>
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b21      	cmp	r3, #33	@ 0x21
 800212e:	d150      	bne.n	80021d2 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d01e      	beq.n	8002174 <I2C_MasterTransmit_TXE+0x70>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b20      	cmp	r3, #32
 800213a:	d01b      	beq.n	8002174 <I2C_MasterTransmit_TXE+0x70>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002142:	d017      	beq.n	8002174 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002152:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2211      	movs	r2, #17
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002172:	e062      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002182:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b40      	cmp	r3, #64	@ 0x40
 80021ac:	d108      	bne.n	80021c0 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021be:	e03c      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d0:	e033      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b21      	cmp	r3, #33	@ 0x21
 80021d6:	d005      	beq.n	80021e4 <I2C_MasterTransmit_TXE+0xe0>
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b40      	cmp	r3, #64	@ 0x40
 80021dc:	d12d      	bne.n	800223a <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b22      	cmp	r3, #34	@ 0x22
 80021e2:	d12a      	bne.n	800223a <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021fe:	e01c      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d103      	bne.n	8002214 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f891 	bl	8002334 <I2C_MemoryTransmit_TXE_BTF>
}
 8002212:	e012      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002238:	e7ff      	b.n	800223a <I2C_MasterTransmit_TXE+0x136>
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b21      	cmp	r3, #33	@ 0x21
 800225a:	d167      	bne.n	800232c <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800228a:	e04f      	b.n	800232c <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b08      	cmp	r3, #8
 8002290:	d01e      	beq.n	80022d0 <I2C_MasterTransmit_BTF+0x8e>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b20      	cmp	r3, #32
 8002296:	d01b      	beq.n	80022d0 <I2C_MasterTransmit_BTF+0x8e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800229e:	d017      	beq.n	80022d0 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022ae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2211      	movs	r2, #17
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
}
 80022ce:	e02d      	b.n	800232c <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d108      	bne.n	800231c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
}
 800231a:	e007      	b.n	800232c <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002342:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11d      	bne.n	8002388 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10b      	bne.n	800236c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002364:	1c9a      	adds	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800236a:	e078      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002370:	b29b      	uxth	r3, r3
 8002372:	121b      	asrs	r3, r3, #8
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002386:	e06a      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 1U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10b      	bne.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002394:	b2da      	uxtb	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023a6:	e05a      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
  else if (hi2c->EventCount == 2U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d153      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0x124>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b22      	cmp	r3, #34	@ 0x22
 80023b4:	d10d      	bne.n	80023d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023d0:	e045      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b21      	cmp	r3, #33	@ 0x21
 80023e0:	d112      	bne.n	8002408 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002406:	e02a      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d125      	bne.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b21      	cmp	r3, #33	@ 0x21
 8002416:	d122      	bne.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002426:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002436:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
}
 8002456:	e002      	b.n	800245e <I2C_MemoryTransmit_TXE_BTF+0x12a>
    I2C_Flush_DR(hi2c);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fb67 	bl	8001b2c <I2C_Flush_DR>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b22      	cmp	r3, #34	@ 0x22
 8002478:	f040 80bd 	bne.w	80025f6 <I2C_MasterReceive_RXNE+0x190>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d921      	bls.n	80024d4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b03      	cmp	r3, #3
 80024be:	f040 809a 	bne.w	80025f6 <I2C_MasterReceive_RXNE+0x190>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80024d2:	e090      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x190>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	2b02      	cmp	r3, #2
 80024da:	f000 8083 	beq.w	80025e4 <I2C_MasterReceive_RXNE+0x17e>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d002      	beq.n	80024ea <I2C_MasterReceive_RXNE+0x84>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d17c      	bne.n	80025e4 <I2C_MasterReceive_RXNE+0x17e>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 f852 	bl	8003594 <I2C_WaitOnSTOPRequestThroughIT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d14e      	bne.n	8002594 <I2C_MasterReceive_RXNE+0x12e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002504:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002514:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d10b      	bne.n	8002568 <I2C_MasterReceive_RXNE+0x102>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002566:	e046      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x190>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d002      	beq.n	800257c <I2C_MasterReceive_RXNE+0x116>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b20      	cmp	r3, #32
 800257a:	d103      	bne.n	8002584 <I2C_MasterReceive_RXNE+0x11e>
            hi2c->PreviousState = I2C_STATE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
 8002582:	e002      	b.n	800258a <I2C_MasterReceive_RXNE+0x124>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2212      	movs	r2, #18
 8002588:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002592:	e030      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x190>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCallback(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025e2:	e008      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x190>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f2:	605a      	str	r2, [r3, #4]
}
 80025f4:	e7ff      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x190>
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b04      	cmp	r3, #4
 8002614:	d11b      	bne.n	800264e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002624:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800264c:	e0ca      	b.n	80027e4 <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 3U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d129      	bne.n	80026ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002666:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00a      	beq.n	8002684 <I2C_MasterReceive_BTF+0x86>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d007      	beq.n	8002684 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026aa:	e09b      	b.n	80027e4 <I2C_MasterReceive_BTF+0x1e6>
  else if (hi2c->XferCount == 2U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	f040 8083 	bne.w	80027be <I2C_MasterReceive_BTF+0x1c0>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d002      	beq.n	80026c4 <I2C_MasterReceive_BTF+0xc6>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d108      	bne.n	80026d6 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e019      	b.n	800270a <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d002      	beq.n	80026e2 <I2C_MasterReceive_BTF+0xe4>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d108      	bne.n	80026f4 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e00a      	b.n	800270a <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d007      	beq.n	800270a <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002708:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002764:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b40      	cmp	r3, #64	@ 0x40
 8002778:	d10b      	bne.n	8002792 <I2C_MasterReceive_BTF+0x194>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
}
 8002790:	e028      	b.n	80027e4 <I2C_MasterReceive_BTF+0x1e6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d002      	beq.n	80027a6 <I2C_MasterReceive_BTF+0x1a8>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d103      	bne.n	80027ae <I2C_MasterReceive_BTF+0x1b0>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ac:	e002      	b.n	80027b4 <I2C_MasterReceive_BTF+0x1b6>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2212      	movs	r2, #18
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
}
 80027bc:	e012      	b.n	80027e4 <I2C_MasterReceive_BTF+0x1e6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b40      	cmp	r3, #64	@ 0x40
 80027fe:	d117      	bne.n	8002830 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002818:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800281a:	e067      	b.n	80028ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	611a      	str	r2, [r3, #16]
}
 800282e:	e05d      	b.n	80028ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002838:	d133      	bne.n	80028a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b21      	cmp	r3, #33	@ 0x21
 8002844:	d109      	bne.n	800285a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	e008      	b.n	800286c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <I2C_Master_SB+0x92>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	2b00      	cmp	r3, #0
 8002884:	d032      	beq.n	80028ec <I2C_Master_SB+0x100>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02d      	beq.n	80028ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800289e:	605a      	str	r2, [r3, #4]
}
 80028a0:	e024      	b.n	80028ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10e      	bne.n	80028c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	11db      	asrs	r3, r3, #7
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 0306 	and.w	r3, r3, #6
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f063 030f 	orn	r3, r3, #15
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]
}
 80028c6:	e011      	b.n	80028ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	11db      	asrs	r3, r3, #7
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0306 	and.w	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 030e 	orn	r3, r3, #14
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002904:	b2da      	uxtb	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <I2C_Master_ADD10+0x26>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d108      	bne.n	8002930 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <I2C_Master_ADD10+0x48>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800293e:	605a      	str	r2, [r3, #4]
  }
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b091      	sub	sp, #68	@ 0x44
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800295a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b22      	cmp	r3, #34	@ 0x22
 8002974:	f040 8169 	bne.w	8002c4a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10f      	bne.n	80029a0 <I2C_Master_ADDR+0x54>
 8002980:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d10b      	bne.n	80029a0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	e160      	b.n	8002c62 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <I2C_Master_ADDR+0x98>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029b0:	d118      	bne.n	80029e4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80029e2:	e13e      	b.n	8002c62 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d113      	bne.n	8002a16 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e115      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 808a 	bne.w	8002b36 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a28:	d137      	bne.n	8002a9a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a38:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a48:	d113      	bne.n	8002a72 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a58:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	e0e7      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	623b      	str	r3, [r7, #32]
 8002a86:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e0d3      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d02e      	beq.n	8002afe <I2C_Master_ADDR+0x1b2>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d02b      	beq.n	8002afe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d102      	bne.n	8002ab2 <I2C_Master_ADDR+0x166>
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d125      	bne.n	8002afe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d00e      	beq.n	8002ad6 <I2C_Master_ADDR+0x18a>
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d00b      	beq.n	8002ad6 <I2C_Master_ADDR+0x18a>
 8002abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d008      	beq.n	8002ad6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e0a1      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e085      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d14d      	bne.n	8002bdc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d016      	beq.n	8002b74 <I2C_Master_ADDR+0x228>
 8002b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d013      	beq.n	8002b74 <I2C_Master_ADDR+0x228>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d010      	beq.n	8002b74 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b60:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e007      	b.n	8002b84 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b82:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b92:	d117      	bne.n	8002bc4 <I2C_Master_ADDR+0x278>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b9a:	d00b      	beq.n	8002bb4 <I2C_Master_ADDR+0x268>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d008      	beq.n	8002bb4 <I2C_Master_ADDR+0x268>
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d005      	beq.n	8002bb4 <I2C_Master_ADDR+0x268>
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d002      	beq.n	8002bb4 <I2C_Master_ADDR+0x268>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d107      	bne.n	8002bc4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bc2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	e032      	b.n	8002c42 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bfa:	d117      	bne.n	8002c2c <I2C_Master_ADDR+0x2e0>
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c02:	d00b      	beq.n	8002c1c <I2C_Master_ADDR+0x2d0>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d008      	beq.n	8002c1c <I2C_Master_ADDR+0x2d0>
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d005      	beq.n	8002c1c <I2C_Master_ADDR+0x2d0>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d002      	beq.n	8002c1c <I2C_Master_ADDR+0x2d0>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d107      	bne.n	8002c2c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c2a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c48:	e00b      	b.n	8002c62 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	e7ff      	b.n	8002c62 <I2C_Master_ADDR+0x316>
 8002c62:	bf00      	nop
 8002c64:	3744      	adds	r7, #68	@ 0x44
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02c      	beq.n	8002ce2 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d115      	bne.n	8002ce2 <I2C_SlaveTransmit_TXE+0x74>
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b29      	cmp	r3, #41	@ 0x29
 8002cba:	d112      	bne.n	8002ce2 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2221      	movs	r2, #33	@ 0x21
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2228      	movs	r2, #40	@ 0x28
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d011      	beq.n	8002d20 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02d      	beq.n	8002da2 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <I2C_SlaveReceive_RXNE+0x76>
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d7a:	d112      	bne.n	8002da2 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2222      	movs	r2, #34	@ 0x22
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2228      	movs	r2, #40	@ 0x28
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d012      	beq.n	8002de2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e08:	2b28      	cmp	r3, #40	@ 0x28
 8002e0a:	d125      	bne.n	8002e58 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	81bb      	strh	r3, [r7, #12]
 8002e3a:	e002      	b.n	8002e42 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e4e:	89ba      	ldrh	r2, [r7, #12]
 8002e50:	7bf9      	ldrb	r1, [r7, #15]
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e56:	e00e      	b.n	8002e76 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ecc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002edc:	d172      	bne.n	8002fc4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b22      	cmp	r3, #34	@ 0x22
 8002ee2:	d002      	beq.n	8002eea <I2C_Slave_STOPF+0x6a>
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ee8:	d135      	bne.n	8002f56 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fabb 	bl	800149e <HAL_DMA_GetState>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d049      	beq.n	8002fc2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <I2C_Slave_STOPF+0x260>)
 8002f34:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fa8d 	bl	800145a <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03d      	beq.n	8002fc2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f54:	e035      	b.n	8002fc2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa85 	bl	800149e <HAL_DMA_GetState>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d014      	beq.n	8002fc4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9e:	4a50      	ldr	r2, [pc, #320]	@ (80030e0 <I2C_Slave_STOPF+0x260>)
 8002fa0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fa57 	bl	800145a <HAL_DMA_Abort_IT>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4798      	blx	r3
 8002fc0:	e000      	b.n	8002fc4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fc2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03e      	beq.n	800304c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d112      	bne.n	8003002 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b40      	cmp	r3, #64	@ 0x40
 800300e:	d112      	bne.n	8003036 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8bd 	bl	80031d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800305a:	e03c      	b.n	80030d6 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003060:	d10a      	bne.n	8003078 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2228      	movs	r2, #40	@ 0x28
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b28      	cmp	r3, #40	@ 0x28
 8003082:	d112      	bne.n	80030aa <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <I2C_Slave_STOPF+0x264>)
 8003088:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
}
 80030a8:	e015      	b.n	80030d6 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	2b22      	cmp	r3, #34	@ 0x22
 80030b0:	d002      	beq.n	80030b8 <I2C_Slave_STOPF+0x238>
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b22      	cmp	r3, #34	@ 0x22
 80030b6:	d10e      	bne.n	80030d6 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08003441 	.word	0x08003441
 80030e4:	ffff0000 	.word	0xffff0000

080030e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d002      	beq.n	800310a <I2C_Slave_AF+0x22>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d12a      	bne.n	8003160 <I2C_Slave_AF+0x78>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b28      	cmp	r3, #40	@ 0x28
 800310e:	d127      	bne.n	8003160 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a2f      	ldr	r2, [pc, #188]	@ (80031d0 <I2C_Slave_AF+0xe8>)
 8003114:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003124:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800315e:	e032      	b.n	80031c6 <I2C_Slave_AF+0xde>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b21      	cmp	r3, #33	@ 0x21
 8003164:	d12a      	bne.n	80031bc <I2C_Slave_AF+0xd4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	@ (80031d0 <I2C_Slave_AF+0xe8>)
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2221      	movs	r2, #33	@ 0x21
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003190:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800319a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031aa:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fe fcbd 	bl	8001b2c <I2C_Flush_DR>
    hi2c->SlaveTxCpltCallback(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
}
 80031ba:	e004      	b.n	80031c6 <I2C_Slave_AF+0xde>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031c4:	615a      	str	r2, [r3, #20]
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	ffff0000 	.word	0xffff0000

080031d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d002      	beq.n	80031f8 <I2C_ITError+0x24>
 80031f2:	7bbb      	ldrb	r3, [r7, #14]
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d10a      	bne.n	800320e <I2C_ITError+0x3a>
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b22      	cmp	r3, #34	@ 0x22
 80031fc:	d107      	bne.n	800320e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003214:	2b28      	cmp	r3, #40	@ 0x28
 8003216:	d107      	bne.n	8003228 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2228      	movs	r2, #40	@ 0x28
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003226:	e015      	b.n	8003254 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003236:	d00a      	beq.n	800324e <I2C_ITError+0x7a>
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b60      	cmp	r3, #96	@ 0x60
 800323c:	d007      	beq.n	800324e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003262:	d162      	bne.n	800332a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d020      	beq.n	80032c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	4a6c      	ldr	r2, [pc, #432]	@ (8003438 <I2C_ITError+0x264>)
 8003288:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe f8e3 	bl	800145a <HAL_DMA_Abort_IT>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 808b 	beq.w	80033b2 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032be:	4610      	mov	r0, r2
 80032c0:	4798      	blx	r3
 80032c2:	e076      	b.n	80033b2 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <I2C_ITError+0x264>)
 80032ca:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe f8c2 	bl	800145a <HAL_DMA_Abort_IT>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d06a      	beq.n	80033b2 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d10b      	bne.n	8003302 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003324:	4610      	mov	r0, r2
 8003326:	4798      	blx	r3
 8003328:	e043      	b.n	80033b2 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b60      	cmp	r3, #96	@ 0x60
 8003334:	d126      	bne.n	8003384 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d10b      	bne.n	800336a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
 8003382:	e016      	b.n	80033b2 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d10b      	bne.n	80033aa <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d114      	bne.n	800342e <I2C_ITError+0x25a>
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b28      	cmp	r3, #40	@ 0x28
 8003408:	d111      	bne.n	800342e <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <I2C_ITError+0x268>)
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	08003441 	.word	0x08003441
 800343c:	ffff0000 	.word	0xffff0000

08003440 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800345a:	4b4c      	ldr	r3, [pc, #304]	@ (800358c <I2C_DMAAbort+0x14c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	4a4b      	ldr	r2, [pc, #300]	@ (8003590 <I2C_DMAAbort+0x150>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0a1a      	lsrs	r2, r3, #8
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00da      	lsls	r2, r3, #3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f043 0220 	orr.w	r2, r3, #32
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003486:	e00a      	b.n	800349e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b01      	subs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d0ea      	beq.n	8003474 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	2200      	movs	r2, #0
 80034ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e0:	2200      	movs	r2, #0
 80034e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b60      	cmp	r3, #96	@ 0x60
 800350e:	d10f      	bne.n	8003530 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800352e:	e028      	b.n	8003582 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003536:	2b28      	cmp	r3, #40	@ 0x28
 8003538:	d117      	bne.n	800356a <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003558:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2228      	movs	r2, #40	@ 0x28
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003568:	e007      	b.n	800357a <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCallback(hi2c);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	4798      	blx	r3
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000000 	.word	0x20000000
 8003590:	14f8b589 	.word	0x14f8b589

08003594 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80035a0:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0a1a      	lsrs	r2, r3, #8
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d107      	bne.n	80035d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e008      	b.n	80035e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e0:	d0e9      	beq.n	80035b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000000 	.word	0x20000000
 80035f4:	14f8b589 	.word	0x14f8b589

080035f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003608:	d103      	bne.n	8003612 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003610:	e007      	b.n	8003622 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800361a:	d102      	bne.n	8003622 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2208      	movs	r2, #8
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e267      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d075      	beq.n	800373a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800364e:	4b88      	ldr	r3, [pc, #544]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d00c      	beq.n	8003674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b85      	ldr	r3, [pc, #532]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003662:	2b08      	cmp	r3, #8
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b82      	ldr	r3, [pc, #520]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b7e      	ldr	r3, [pc, #504]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <HAL_RCC_OscConfig+0x108>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d157      	bne.n	8003738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e242      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x74>
 8003696:	4b76      	ldr	r3, [pc, #472]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x98>
 80036ae:	4b70      	ldr	r3, [pc, #448]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6c      	ldr	r2, [pc, #432]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036c8:	4b69      	ldr	r3, [pc, #420]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a68      	ldr	r2, [pc, #416]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b66      	ldr	r3, [pc, #408]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fd fd76 	bl	80011d8 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fd fd72 	bl	80011d8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e207      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b5b      	ldr	r3, [pc, #364]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xc0>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fd fd62 	bl	80011d8 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fd fd5e 	bl	80011d8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e1f3      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0xe8>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d063      	beq.n	800380e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003746:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b47      	ldr	r3, [pc, #284]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800375a:	2b08      	cmp	r3, #8
 800375c:	d11c      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375e:	4b44      	ldr	r3, [pc, #272]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1c7      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	4b3b      	ldr	r3, [pc, #236]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4937      	ldr	r1, [pc, #220]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	e03a      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a0:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <HAL_RCC_OscConfig+0x244>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fd17 	bl	80011d8 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fd fd13 	bl	80011d8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e1a8      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b28      	ldr	r3, [pc, #160]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4925      	ldr	r1, [pc, #148]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e015      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x244>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fd fcf6 	bl	80011d8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fd fcf2 	bl	80011d8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e187      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d036      	beq.n	8003888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <HAL_RCC_OscConfig+0x248>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fcd6 	bl	80011d8 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003830:	f7fd fcd2 	bl	80011d8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e167      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_OscConfig+0x240>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x200>
 800384e:	e01b      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003850:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <HAL_RCC_OscConfig+0x248>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fd fcbf 	bl	80011d8 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00e      	b.n	800387c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385e:	f7fd fcbb 	bl	80011d8 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d907      	bls.n	800387c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e150      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	42470000 	.word	0x42470000
 8003878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b88      	ldr	r3, [pc, #544]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ea      	bne.n	800385e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8097 	beq.w	80039c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b81      	ldr	r3, [pc, #516]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b7d      	ldr	r3, [pc, #500]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b6:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b77      	ldr	r3, [pc, #476]	@ (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d118      	bne.n	8003904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d2:	4b74      	ldr	r3, [pc, #464]	@ (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a73      	ldr	r2, [pc, #460]	@ (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038de:	f7fd fc7b 	bl	80011d8 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e6:	f7fd fc77 	bl	80011d8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e10c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x2ea>
 800390c:	4b64      	ldr	r3, [pc, #400]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	4a63      	ldr	r2, [pc, #396]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	@ 0x70
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x30c>
 8003922:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6713      	str	r3, [r2, #112]	@ 0x70
 800392e:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003932:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	@ 0x70
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800393c:	4b58      	ldr	r3, [pc, #352]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	4a57      	ldr	r2, [pc, #348]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6713      	str	r3, [r2, #112]	@ 0x70
 8003948:	4b55      	ldr	r3, [pc, #340]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	4a54      	ldr	r2, [pc, #336]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fc3c 	bl	80011d8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fd fc38 	bl	80011d8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0cb      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ee      	beq.n	8003964 <HAL_RCC_OscConfig+0x334>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fd fc26 	bl	80011d8 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd fc22 	bl	80011d8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0b5      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ee      	bne.n	8003990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b39      	ldr	r3, [pc, #228]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	4a38      	ldr	r2, [pc, #224]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a1 	beq.w	8003b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ce:	4b34      	ldr	r3, [pc, #208]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d05c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d141      	bne.n	8003a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_RCC_OscConfig+0x478>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fbf6 	bl	80011d8 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fbf2 	bl	80011d8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e087      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	4b27      	ldr	r3, [pc, #156]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	491b      	ldr	r1, [pc, #108]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fbcb 	bl	80011d8 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd fbc7 	bl	80011d8 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e05c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x416>
 8003a64:	e054      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fbb4 	bl	80011d8 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fbb0 	bl	80011d8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e045      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x444>
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e038      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_RCC_OscConfig+0x4ec>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d121      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0cc      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b68      	ldr	r3, [pc, #416]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d90c      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b65      	ldr	r3, [pc, #404]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0b8      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b74:	4b59      	ldr	r3, [pc, #356]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a58      	ldr	r2, [pc, #352]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b8c:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a52      	ldr	r2, [pc, #328]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b98:	4b50      	ldr	r3, [pc, #320]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	494d      	ldr	r1, [pc, #308]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d044      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d119      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b3f      	ldr	r3, [pc, #252]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3b      	ldr	r3, [pc, #236]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e067      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4934      	ldr	r1, [pc, #208]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c10:	f7fd fae2 	bl	80011d8 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fade 	bl	80011d8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e04f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b25      	ldr	r3, [pc, #148]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d20c      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e032      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4916      	ldr	r1, [pc, #88]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490e      	ldr	r1, [pc, #56]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ca6:	f000 f821 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490a      	ldr	r1, [pc, #40]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a09      	ldr	r2, [pc, #36]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fa42 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08005bfc 	.word	0x08005bfc
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000004 	.word	0x20000004

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b090      	sub	sp, #64	@ 0x40
 8003cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d04:	4b59      	ldr	r3, [pc, #356]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d00d      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x40>
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	f200 80a1 	bhi.w	8003e58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x34>
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d1e:	e09b      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b53      	ldr	r3, [pc, #332]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d24:	e09b      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d26:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d2a:	e098      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d36:	4b4d      	ldr	r3, [pc, #308]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d028      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b4a      	ldr	r3, [pc, #296]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	2200      	movs	r2, #0
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d54:	2100      	movs	r1, #0
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d58:	fb03 f201 	mul.w	r2, r3, r1
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	fb00 f303 	mul.w	r3, r0, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	4a43      	ldr	r2, [pc, #268]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d66:	fba0 1202 	umull	r1, r2, r0, r2
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d72:	4413      	add	r3, r2
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d78:	2200      	movs	r2, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	61fa      	str	r2, [r7, #28]
 8003d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d86:	f7fc fa7b 	bl	8000280 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4613      	mov	r3, r2
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d92:	e053      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d94:	4b35      	ldr	r3, [pc, #212]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	617a      	str	r2, [r7, #20]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003da6:	f04f 0b00 	mov.w	fp, #0
 8003daa:	4652      	mov	r2, sl
 8003dac:	465b      	mov	r3, fp
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003dc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dde:	ebb2 0408 	subs.w	r4, r2, r8
 8003de2:	eb63 0509 	sbc.w	r5, r3, r9
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	00eb      	lsls	r3, r5, #3
 8003df0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df4:	00e2      	lsls	r2, r4, #3
 8003df6:	4614      	mov	r4, r2
 8003df8:	461d      	mov	r5, r3
 8003dfa:	eb14 030a 	adds.w	r3, r4, sl
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	eb45 030b 	adc.w	r3, r5, fp
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e12:	4629      	mov	r1, r5
 8003e14:	028b      	lsls	r3, r1, #10
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	028a      	lsls	r2, r1, #10
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e26:	2200      	movs	r2, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e30:	f7fc fa26 	bl	8000280 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3740      	adds	r7, #64	@ 0x40
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	017d7840 	.word	0x017d7840

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	@ (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000000 	.word	0x20000000

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a9b      	lsrs	r3, r3, #10
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	@ (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08005c0c 	.word	0x08005c0c

08003eb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e041      	b.n	8003f4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc fedc 	bl	8000c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 f9a0 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_TIM_PWM_Start+0x24>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e022      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x6a>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d109      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x3e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	e015      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x6a>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d109      	bne.n	8003fb0 <HAL_TIM_PWM_Start+0x58>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e008      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x6a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e068      	b.n	800409c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0x82>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	e013      	b.n	8004002 <HAL_TIM_PWM_Start+0xaa>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0x92>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe8:	e00b      	b.n	8004002 <HAL_TIM_PWM_Start+0xaa>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xa2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff8:	e003      	b.n	8004002 <HAL_TIM_PWM_Start+0xaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb2e 	bl	800466c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a23      	ldr	r2, [pc, #140]	@ (80040a4 <HAL_TIM_PWM_Start+0x14c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d107      	bne.n	800402a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <HAL_TIM_PWM_Start+0x14c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_TIM_PWM_Start+0x10e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403c:	d013      	beq.n	8004066 <HAL_TIM_PWM_Start+0x10e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_TIM_PWM_Start+0x150>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIM_PWM_Start+0x10e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_TIM_PWM_Start+0x154>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIM_PWM_Start+0x10e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_TIM_PWM_Start+0x158>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIM_PWM_Start+0x10e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <HAL_TIM_PWM_Start+0x15c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d010      	beq.n	800409a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	e007      	b.n	800409a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40014000 	.word	0x40014000

080040b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e0ae      	b.n	8004234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	f200 809f 	bhi.w	8004224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004121 	.word	0x08004121
 80040f0:	08004225 	.word	0x08004225
 80040f4:	08004225 	.word	0x08004225
 80040f8:	08004225 	.word	0x08004225
 80040fc:	08004161 	.word	0x08004161
 8004100:	08004225 	.word	0x08004225
 8004104:	08004225 	.word	0x08004225
 8004108:	08004225 	.word	0x08004225
 800410c:	080041a3 	.word	0x080041a3
 8004110:	08004225 	.word	0x08004225
 8004114:	08004225 	.word	0x08004225
 8004118:	08004225 	.word	0x08004225
 800411c:	080041e3 	.word	0x080041e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f914 	bl	8004354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0208 	orr.w	r2, r2, #8
 800413a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
      break;
 800415e:	e064      	b.n	800422a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f95a 	bl	8004420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	021a      	lsls	r2, r3, #8
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
      break;
 80041a0:	e043      	b.n	800422a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f9a5 	bl	80044f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0208 	orr.w	r2, r2, #8
 80041bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0204 	bic.w	r2, r2, #4
 80041cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69d9      	ldr	r1, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	61da      	str	r2, [r3, #28]
      break;
 80041e0:	e023      	b.n	800422a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f9ef 	bl	80045cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	61da      	str	r2, [r3, #28]
      break;
 8004222:	e002      	b.n	800422a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3a      	ldr	r2, [pc, #232]	@ (8004338 <TIM_Base_SetConfig+0xfc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00f      	beq.n	8004274 <TIM_Base_SetConfig+0x38>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425a:	d00b      	beq.n	8004274 <TIM_Base_SetConfig+0x38>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a37      	ldr	r2, [pc, #220]	@ (800433c <TIM_Base_SetConfig+0x100>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <TIM_Base_SetConfig+0x104>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a35      	ldr	r2, [pc, #212]	@ (8004344 <TIM_Base_SetConfig+0x108>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d108      	bne.n	8004286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <TIM_Base_SetConfig+0xfc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01b      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004294:	d017      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a28      	ldr	r2, [pc, #160]	@ (800433c <TIM_Base_SetConfig+0x100>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a27      	ldr	r2, [pc, #156]	@ (8004340 <TIM_Base_SetConfig+0x104>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00f      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a26      	ldr	r2, [pc, #152]	@ (8004344 <TIM_Base_SetConfig+0x108>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00b      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a25      	ldr	r2, [pc, #148]	@ (8004348 <TIM_Base_SetConfig+0x10c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d007      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a24      	ldr	r2, [pc, #144]	@ (800434c <TIM_Base_SetConfig+0x110>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a23      	ldr	r2, [pc, #140]	@ (8004350 <TIM_Base_SetConfig+0x114>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d108      	bne.n	80042d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004338 <TIM_Base_SetConfig+0xfc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d103      	bne.n	800430c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]
  }
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800

08004354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f023 0201 	bic.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0302 	bic.w	r3, r3, #2
 800439c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a1c      	ldr	r2, [pc, #112]	@ (800441c <TIM_OC1_SetConfig+0xc8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10c      	bne.n	80043ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0308 	bic.w	r3, r3, #8
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a13      	ldr	r2, [pc, #76]	@ (800441c <TIM_OC1_SetConfig+0xc8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40010000 	.word	0x40010000

08004420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f023 0210 	bic.w	r2, r3, #16
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0320 	bic.w	r3, r3, #32
 800446a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <TIM_OC2_SetConfig+0xd4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10d      	bne.n	800449c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <TIM_OC2_SetConfig+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d113      	bne.n	80044cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000

080044f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <TIM_OC3_SetConfig+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d10d      	bne.n	8004572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800455c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <TIM_OC3_SetConfig+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d113      	bne.n	80045a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	621a      	str	r2, [r3, #32]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40010000 	.word	0x40010000

080045cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	031b      	lsls	r3, r3, #12
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <TIM_OC4_SetConfig+0x9c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d109      	bne.n	8004640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000

0800466c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <HAL_TIMEx_PWMN_Start+0x24>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e022      	b.n	8004722 <HAL_TIMEx_PWMN_Start+0x6a>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d109      	bne.n	80046f6 <HAL_TIMEx_PWMN_Start+0x3e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e015      	b.n	8004722 <HAL_TIMEx_PWMN_Start+0x6a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d109      	bne.n	8004710 <HAL_TIMEx_PWMN_Start+0x58>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e008      	b.n	8004722 <HAL_TIMEx_PWMN_Start+0x6a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e063      	b.n	80047f2 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_TIMEx_PWMN_Start+0x82>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004738:	e013      	b.n	8004762 <HAL_TIMEx_PWMN_Start+0xaa>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b04      	cmp	r3, #4
 800473e:	d104      	bne.n	800474a <HAL_TIMEx_PWMN_Start+0x92>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004748:	e00b      	b.n	8004762 <HAL_TIMEx_PWMN_Start+0xaa>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d104      	bne.n	800475a <HAL_TIMEx_PWMN_Start+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004758:	e003      	b.n	8004762 <HAL_TIMEx_PWMN_Start+0xaa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2204      	movs	r2, #4
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f910 	bl	8004990 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1d      	ldr	r2, [pc, #116]	@ (80047fc <HAL_TIMEx_PWMN_Start+0x144>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIMEx_PWMN_Start+0x104>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d013      	beq.n	80047bc <HAL_TIMEx_PWMN_Start+0x104>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a19      	ldr	r2, [pc, #100]	@ (8004800 <HAL_TIMEx_PWMN_Start+0x148>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIMEx_PWMN_Start+0x104>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	@ (8004804 <HAL_TIMEx_PWMN_Start+0x14c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIMEx_PWMN_Start+0x104>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a16      	ldr	r2, [pc, #88]	@ (8004808 <HAL_TIMEx_PWMN_Start+0x150>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIMEx_PWMN_Start+0x104>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	@ (800480c <HAL_TIMEx_PWMN_Start+0x154>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d111      	bne.n	80047e0 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d010      	beq.n	80047f0 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	e007      	b.n	80047f0 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40014000 	.word	0x40014000

08004810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004824:	2302      	movs	r3, #2
 8004826:	e050      	b.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004874:	d013      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a16      	ldr	r2, [pc, #88]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a15      	ldr	r2, [pc, #84]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a13      	ldr	r2, [pc, #76]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40014000 	.word	0x40014000

080048ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e03d      	b.n	8004984 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	2204      	movs	r2, #4
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	401a      	ands	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <GetChannels_Value>:
 * @brief  Get the channel and the pulse width from the received string
 * @param  ReceivedStr: The received string from the master
 * @param  Ret_channel: The channel number (Return value)
 * @param  Ret_usPulse: The pulse width in microseconds (Return value)
*/
void GetChannels_Value(uint8_t * ReceivedStr , uint8_t *Ret_channel , uint16_t * Ret_usPulse){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	int channel, usPulse;

   // Use strtok to split the string by the delimiter '-'
   char *token = strtok(ReceivedStr, "-");
 80049e8:	4910      	ldr	r1, [pc, #64]	@ (8004a2c <GetChannels_Value+0x50>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fa0a 	bl	8004e04 <strtok>
 80049f0:	6178      	str	r0, [r7, #20]
   if (token != NULL) {
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <GetChannels_Value+0x2a>
	   *Ret_channel = atoi(token);
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f000 f86c 	bl	8004ad6 <atoi>
 80049fe:	4603      	mov	r3, r0
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	701a      	strb	r2, [r3, #0]
   }

   token = strtok(NULL, "-");
 8004a06:	4909      	ldr	r1, [pc, #36]	@ (8004a2c <GetChannels_Value+0x50>)
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f000 f9fb 	bl	8004e04 <strtok>
 8004a0e:	6178      	str	r0, [r7, #20]
   if (token != NULL) {
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <GetChannels_Value+0x48>
	   *Ret_usPulse = atoi(token);
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f000 f85d 	bl	8004ad6 <atoi>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	801a      	strh	r2, [r3, #0]
   }
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	08005bf8 	.word	0x08005bf8

08004a30 <HAL_I2C_ListenCpltCallback>:


/**
 * @brief Restart listening for the next transmission
*/
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fd f8ff 	bl	8001c3c <HAL_I2C_EnableListen_IT>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_I2C_AddrCallback>:


/**
 * @brief  Callback function when the slave address is matched
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
 8004a54:	4613      	mov	r3, r2
 8004a56:	803b      	strh	r3, [r7, #0]
  if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d10a      	bne.n	8004a74 <HAL_I2C_AddrCallback+0x2c>
    // Master wants to send data to the slave
    HAL_I2C_Slave_Seq_Receive_IT(hi2c, &receivedData, 7, I2C_FIRST_AND_LAST_FRAME);
 8004a5e:	2308      	movs	r3, #8
 8004a60:	2207      	movs	r2, #7
 8004a62:	4906      	ldr	r1, [pc, #24]	@ (8004a7c <HAL_I2C_AddrCallback+0x34>)
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fd f876 	bl	8001b56 <HAL_I2C_Slave_Seq_Receive_IT>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a6e:	4804      	ldr	r0, [pc, #16]	@ (8004a80 <HAL_I2C_AddrCallback+0x38>)
 8004a70:	f7fc fec1 	bl	80017f6 <HAL_GPIO_TogglePin>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	200001ec 	.word	0x200001ec
 8004a80:	40020800 	.word	0x40020800

08004a84 <HAL_I2C_SlaveRxCpltCallback>:

/**
 * @brief  Callback function when data reception is complete and Data received successfully
*/
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  // Data received successfully
  // Process the received data (e.g., print it or store it)
  receivedData[0]='0';
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8004a8e:	2230      	movs	r2, #48	@ 0x30
 8004a90:	701a      	strb	r2, [r3, #0]
  GetChannels_Value(receivedData, &Channel_Received_Rasp,&usPulse_Speed_Received_Rasp);
 8004a92:	4a08      	ldr	r2, [pc, #32]	@ (8004ab4 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8004a94:	4908      	ldr	r1, [pc, #32]	@ (8004ab8 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8004a96:	4806      	ldr	r0, [pc, #24]	@ (8004ab0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8004a98:	f7ff ffa0 	bl	80049dc <GetChannels_Value>

  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

  counter++;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8004aa6:	701a      	strb	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	200001ec 	.word	0x200001ec
 8004ab4:	200001e2 	.word	0x200001e2
 8004ab8:	200001e0 	.word	0x200001e0
 8004abc:	200001f6 	.word	0x200001f6

08004ac0 <HAL_I2C_ErrorCallback>:


/**
 * @brief  Callback function when an error occurs
*/
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef * hi2c){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	 HAL_I2C_EnableListen_IT(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fd f8b7 	bl	8001c3c <HAL_I2C_EnableListen_IT>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <atoi>:
 8004ad6:	220a      	movs	r2, #10
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f000 b87b 	b.w	8004bd4 <strtol>
	...

08004ae0 <_strtol_l.constprop.0>:
 8004ae0:	2b24      	cmp	r3, #36	@ 0x24
 8004ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae6:	4686      	mov	lr, r0
 8004ae8:	4690      	mov	r8, r2
 8004aea:	d801      	bhi.n	8004af0 <_strtol_l.constprop.0+0x10>
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d106      	bne.n	8004afe <_strtol_l.constprop.0+0x1e>
 8004af0:	f000 fa2a 	bl	8004f48 <__errno>
 8004af4:	2316      	movs	r3, #22
 8004af6:	6003      	str	r3, [r0, #0]
 8004af8:	2000      	movs	r0, #0
 8004afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afe:	4834      	ldr	r0, [pc, #208]	@ (8004bd0 <_strtol_l.constprop.0+0xf0>)
 8004b00:	460d      	mov	r5, r1
 8004b02:	462a      	mov	r2, r5
 8004b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b08:	5d06      	ldrb	r6, [r0, r4]
 8004b0a:	f016 0608 	ands.w	r6, r6, #8
 8004b0e:	d1f8      	bne.n	8004b02 <_strtol_l.constprop.0+0x22>
 8004b10:	2c2d      	cmp	r4, #45	@ 0x2d
 8004b12:	d12d      	bne.n	8004b70 <_strtol_l.constprop.0+0x90>
 8004b14:	782c      	ldrb	r4, [r5, #0]
 8004b16:	2601      	movs	r6, #1
 8004b18:	1c95      	adds	r5, r2, #2
 8004b1a:	f033 0210 	bics.w	r2, r3, #16
 8004b1e:	d109      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b20:	2c30      	cmp	r4, #48	@ 0x30
 8004b22:	d12a      	bne.n	8004b7a <_strtol_l.constprop.0+0x9a>
 8004b24:	782a      	ldrb	r2, [r5, #0]
 8004b26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004b2a:	2a58      	cmp	r2, #88	@ 0x58
 8004b2c:	d125      	bne.n	8004b7a <_strtol_l.constprop.0+0x9a>
 8004b2e:	786c      	ldrb	r4, [r5, #1]
 8004b30:	2310      	movs	r3, #16
 8004b32:	3502      	adds	r5, #2
 8004b34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004b38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	fbbc f9f3 	udiv	r9, ip, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b4c:	2f09      	cmp	r7, #9
 8004b4e:	d81b      	bhi.n	8004b88 <_strtol_l.constprop.0+0xa8>
 8004b50:	463c      	mov	r4, r7
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	dd27      	ble.n	8004ba6 <_strtol_l.constprop.0+0xc6>
 8004b56:	1c57      	adds	r7, r2, #1
 8004b58:	d007      	beq.n	8004b6a <_strtol_l.constprop.0+0x8a>
 8004b5a:	4581      	cmp	r9, r0
 8004b5c:	d320      	bcc.n	8004ba0 <_strtol_l.constprop.0+0xc0>
 8004b5e:	d101      	bne.n	8004b64 <_strtol_l.constprop.0+0x84>
 8004b60:	45a2      	cmp	sl, r4
 8004b62:	db1d      	blt.n	8004ba0 <_strtol_l.constprop.0+0xc0>
 8004b64:	fb00 4003 	mla	r0, r0, r3, r4
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b6e:	e7eb      	b.n	8004b48 <_strtol_l.constprop.0+0x68>
 8004b70:	2c2b      	cmp	r4, #43	@ 0x2b
 8004b72:	bf04      	itt	eq
 8004b74:	782c      	ldrbeq	r4, [r5, #0]
 8004b76:	1c95      	addeq	r5, r2, #2
 8004b78:	e7cf      	b.n	8004b1a <_strtol_l.constprop.0+0x3a>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1da      	bne.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b7e:	2c30      	cmp	r4, #48	@ 0x30
 8004b80:	bf0c      	ite	eq
 8004b82:	2308      	moveq	r3, #8
 8004b84:	230a      	movne	r3, #10
 8004b86:	e7d5      	b.n	8004b34 <_strtol_l.constprop.0+0x54>
 8004b88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b8c:	2f19      	cmp	r7, #25
 8004b8e:	d801      	bhi.n	8004b94 <_strtol_l.constprop.0+0xb4>
 8004b90:	3c37      	subs	r4, #55	@ 0x37
 8004b92:	e7de      	b.n	8004b52 <_strtol_l.constprop.0+0x72>
 8004b94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004b98:	2f19      	cmp	r7, #25
 8004b9a:	d804      	bhi.n	8004ba6 <_strtol_l.constprop.0+0xc6>
 8004b9c:	3c57      	subs	r4, #87	@ 0x57
 8004b9e:	e7d8      	b.n	8004b52 <_strtol_l.constprop.0+0x72>
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	e7e1      	b.n	8004b6a <_strtol_l.constprop.0+0x8a>
 8004ba6:	1c53      	adds	r3, r2, #1
 8004ba8:	d108      	bne.n	8004bbc <_strtol_l.constprop.0+0xdc>
 8004baa:	2322      	movs	r3, #34	@ 0x22
 8004bac:	f8ce 3000 	str.w	r3, [lr]
 8004bb0:	4660      	mov	r0, ip
 8004bb2:	f1b8 0f00 	cmp.w	r8, #0
 8004bb6:	d0a0      	beq.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bb8:	1e69      	subs	r1, r5, #1
 8004bba:	e006      	b.n	8004bca <_strtol_l.constprop.0+0xea>
 8004bbc:	b106      	cbz	r6, 8004bc0 <_strtol_l.constprop.0+0xe0>
 8004bbe:	4240      	negs	r0, r0
 8004bc0:	f1b8 0f00 	cmp.w	r8, #0
 8004bc4:	d099      	beq.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	d1f6      	bne.n	8004bb8 <_strtol_l.constprop.0+0xd8>
 8004bca:	f8c8 1000 	str.w	r1, [r8]
 8004bce:	e794      	b.n	8004afa <_strtol_l.constprop.0+0x1a>
 8004bd0:	08005c15 	.word	0x08005c15

08004bd4 <strtol>:
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4802      	ldr	r0, [pc, #8]	@ (8004be4 <strtol+0x10>)
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f7ff bf7f 	b.w	8004ae0 <_strtol_l.constprop.0>
 8004be2:	bf00      	nop
 8004be4:	20000018 	.word	0x20000018

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	@ 0x5c
 8004c06:	f000 f8f4 	bl	8004df2 <memset>
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <std+0x58>)
 8004c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <std+0x5c>)
 8004c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <std+0x60>)
 8004c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <std+0x64>)
 8004c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <std+0x68>)
 8004c1c:	6224      	str	r4, [r4, #32]
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d006      	beq.n	8004c30 <std+0x48>
 8004c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c26:	4294      	cmp	r4, r2
 8004c28:	d002      	beq.n	8004c30 <std+0x48>
 8004c2a:	33d0      	adds	r3, #208	@ 0xd0
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d105      	bne.n	8004c3c <std+0x54>
 8004c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f000 b9b0 	b.w	8004f9c <__retarget_lock_init_recursive>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004d6d 	.word	0x08004d6d
 8004c44:	08004d8f 	.word	0x08004d8f
 8004c48:	08004dc7 	.word	0x08004dc7
 8004c4c:	08004deb 	.word	0x08004deb
 8004c50:	200001f8 	.word	0x200001f8

08004c54 <stdio_exit_handler>:
 8004c54:	4a02      	ldr	r2, [pc, #8]	@ (8004c60 <stdio_exit_handler+0xc>)
 8004c56:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <stdio_exit_handler+0x10>)
 8004c58:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <stdio_exit_handler+0x14>)
 8004c5a:	f000 b869 	b.w	8004d30 <_fwalk_sglue>
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c
 8004c64:	080052e9 	.word	0x080052e9
 8004c68:	2000001c 	.word	0x2000001c

08004c6c <cleanup_stdio>:
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <cleanup_stdio+0x34>)
 8004c70:	4299      	cmp	r1, r3
 8004c72:	b510      	push	{r4, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	d001      	beq.n	8004c7c <cleanup_stdio+0x10>
 8004c78:	f000 fb36 	bl	80052e8 <_fflush_r>
 8004c7c:	68a1      	ldr	r1, [r4, #8]
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <cleanup_stdio+0x38>)
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <cleanup_stdio+0x1e>
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 fb2f 	bl	80052e8 <_fflush_r>
 8004c8a:	68e1      	ldr	r1, [r4, #12]
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <cleanup_stdio+0x3c>)
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	d004      	beq.n	8004c9c <cleanup_stdio+0x30>
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f000 bb26 	b.w	80052e8 <_fflush_r>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200001f8 	.word	0x200001f8
 8004ca4:	20000260 	.word	0x20000260
 8004ca8:	200002c8 	.word	0x200002c8

08004cac <global_stdio_init.part.0>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <global_stdio_init.part.0+0x30>)
 8004cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ce0 <global_stdio_init.part.0+0x34>)
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <global_stdio_init.part.0+0x38>)
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2104      	movs	r1, #4
 8004cbc:	f7ff ff94 	bl	8004be8 <std>
 8004cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	2109      	movs	r1, #9
 8004cc8:	f7ff ff8e 	bl	8004be8 <std>
 8004ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd6:	2112      	movs	r1, #18
 8004cd8:	f7ff bf86 	b.w	8004be8 <std>
 8004cdc:	20000330 	.word	0x20000330
 8004ce0:	200001f8 	.word	0x200001f8
 8004ce4:	08004c55 	.word	0x08004c55

08004ce8 <__sfp_lock_acquire>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <__sfp_lock_acquire+0x8>)
 8004cea:	f000 b958 	b.w	8004f9e <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	20000339 	.word	0x20000339

08004cf4 <__sfp_lock_release>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__sfp_lock_release+0x8>)
 8004cf6:	f000 b953 	b.w	8004fa0 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20000339 	.word	0x20000339

08004d00 <__sinit>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	f7ff fff0 	bl	8004ce8 <__sfp_lock_acquire>
 8004d08:	6a23      	ldr	r3, [r4, #32]
 8004d0a:	b11b      	cbz	r3, 8004d14 <__sinit+0x14>
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	f7ff bff0 	b.w	8004cf4 <__sfp_lock_release>
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <__sinit+0x28>)
 8004d16:	6223      	str	r3, [r4, #32]
 8004d18:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <__sinit+0x2c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f5      	bne.n	8004d0c <__sinit+0xc>
 8004d20:	f7ff ffc4 	bl	8004cac <global_stdio_init.part.0>
 8004d24:	e7f2      	b.n	8004d0c <__sinit+0xc>
 8004d26:	bf00      	nop
 8004d28:	08004c6d 	.word	0x08004c6d
 8004d2c:	20000330 	.word	0x20000330

08004d30 <_fwalk_sglue>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	4607      	mov	r7, r0
 8004d36:	4688      	mov	r8, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d40:	f1b9 0901 	subs.w	r9, r9, #1
 8004d44:	d505      	bpl.n	8004d52 <_fwalk_sglue+0x22>
 8004d46:	6824      	ldr	r4, [r4, #0]
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	d1f7      	bne.n	8004d3c <_fwalk_sglue+0xc>
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d907      	bls.n	8004d68 <_fwalk_sglue+0x38>
 8004d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d003      	beq.n	8004d68 <_fwalk_sglue+0x38>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	4306      	orrs	r6, r0
 8004d68:	3568      	adds	r5, #104	@ 0x68
 8004d6a:	e7e9      	b.n	8004d40 <_fwalk_sglue+0x10>

08004d6c <__sread>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d74:	f000 f8c4 	bl	8004f00 <_read_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	bfab      	itete	ge
 8004d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d80:	181b      	addge	r3, r3, r0
 8004d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d86:	bfac      	ite	ge
 8004d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d8a:	81a3      	strhlt	r3, [r4, #12]
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <__swrite>:
 8004d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d92:	461f      	mov	r7, r3
 8004d94:	898b      	ldrh	r3, [r1, #12]
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	d505      	bpl.n	8004dac <__swrite+0x1e>
 8004da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da4:	2302      	movs	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	f000 f898 	bl	8004edc <_lseek_r>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	4632      	mov	r2, r6
 8004dba:	463b      	mov	r3, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	f000 b8af 	b.w	8004f24 <_write_r>

08004dc6 <__sseek>:
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	460c      	mov	r4, r1
 8004dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dce:	f000 f885 	bl	8004edc <_lseek_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	bf15      	itete	ne
 8004dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004de2:	81a3      	strheq	r3, [r4, #12]
 8004de4:	bf18      	it	ne
 8004de6:	81a3      	strhne	r3, [r4, #12]
 8004de8:	bd10      	pop	{r4, pc}

08004dea <__sclose>:
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 b865 	b.w	8004ebc <_close_r>

08004df2 <memset>:
 8004df2:	4402      	add	r2, r0
 8004df4:	4603      	mov	r3, r0
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d100      	bne.n	8004dfc <memset+0xa>
 8004dfa:	4770      	bx	lr
 8004dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8004e00:	e7f9      	b.n	8004df6 <memset+0x4>
	...

08004e04 <strtok>:
 8004e04:	4b16      	ldr	r3, [pc, #88]	@ (8004e60 <strtok+0x5c>)
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	681f      	ldr	r7, [r3, #0]
 8004e0c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004e0e:	4605      	mov	r5, r0
 8004e10:	460e      	mov	r6, r1
 8004e12:	b9ec      	cbnz	r4, 8004e50 <strtok+0x4c>
 8004e14:	2050      	movs	r0, #80	@ 0x50
 8004e16:	f000 f92d 	bl	8005074 <malloc>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6478      	str	r0, [r7, #68]	@ 0x44
 8004e1e:	b920      	cbnz	r0, 8004e2a <strtok+0x26>
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <strtok+0x60>)
 8004e22:	4811      	ldr	r0, [pc, #68]	@ (8004e68 <strtok+0x64>)
 8004e24:	215b      	movs	r1, #91	@ 0x5b
 8004e26:	f000 f8bd 	bl	8004fa4 <__assert_func>
 8004e2a:	e9c0 4400 	strd	r4, r4, [r0]
 8004e2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e36:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004e3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004e3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004e42:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004e46:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004e4a:	6184      	str	r4, [r0, #24]
 8004e4c:	7704      	strb	r4, [r0, #28]
 8004e4e:	6244      	str	r4, [r0, #36]	@ 0x24
 8004e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	2301      	movs	r3, #1
 8004e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5c:	f000 b806 	b.w	8004e6c <__strtok_r>
 8004e60:	20000018 	.word	0x20000018
 8004e64:	08005d15 	.word	0x08005d15
 8004e68:	08005d2c 	.word	0x08005d2c

08004e6c <__strtok_r>:
 8004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	b908      	cbnz	r0, 8004e76 <__strtok_r+0xa>
 8004e72:	6814      	ldr	r4, [r2, #0]
 8004e74:	b144      	cbz	r4, 8004e88 <__strtok_r+0x1c>
 8004e76:	4620      	mov	r0, r4
 8004e78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e82:	b91e      	cbnz	r6, 8004e8c <__strtok_r+0x20>
 8004e84:	b965      	cbnz	r5, 8004ea0 <__strtok_r+0x34>
 8004e86:	6015      	str	r5, [r2, #0]
 8004e88:	2000      	movs	r0, #0
 8004e8a:	e005      	b.n	8004e98 <__strtok_r+0x2c>
 8004e8c:	42b5      	cmp	r5, r6
 8004e8e:	d1f6      	bne.n	8004e7e <__strtok_r+0x12>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <__strtok_r+0xa>
 8004e94:	6014      	str	r4, [r2, #0]
 8004e96:	7003      	strb	r3, [r0, #0]
 8004e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9a:	461c      	mov	r4, r3
 8004e9c:	e00c      	b.n	8004eb8 <__strtok_r+0x4c>
 8004e9e:	b915      	cbnz	r5, 8004ea6 <__strtok_r+0x3a>
 8004ea0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	d1f7      	bne.n	8004e9e <__strtok_r+0x32>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f3      	beq.n	8004e9a <__strtok_r+0x2e>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004eb8:	6014      	str	r4, [r2, #0]
 8004eba:	e7ed      	b.n	8004e98 <__strtok_r+0x2c>

08004ebc <_close_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d06      	ldr	r5, [pc, #24]	@ (8004ed8 <_close_r+0x1c>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f7fc f87a 	bl	8000fc0 <_close>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_close_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_close_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000334 	.word	0x20000334

08004edc <_lseek_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d07      	ldr	r5, [pc, #28]	@ (8004efc <_lseek_r+0x20>)
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	602a      	str	r2, [r5, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f7fc f88f 	bl	800100e <_lseek>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_lseek_r+0x1e>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_lseek_r+0x1e>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20000334 	.word	0x20000334

08004f00 <_read_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4d07      	ldr	r5, [pc, #28]	@ (8004f20 <_read_r+0x20>)
 8004f04:	4604      	mov	r4, r0
 8004f06:	4608      	mov	r0, r1
 8004f08:	4611      	mov	r1, r2
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fc f81d 	bl	8000f4e <_read>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_read_r+0x1e>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_read_r+0x1e>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20000334 	.word	0x20000334

08004f24 <_write_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d07      	ldr	r5, [pc, #28]	@ (8004f44 <_write_r+0x20>)
 8004f28:	4604      	mov	r4, r0
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	602a      	str	r2, [r5, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7fc f828 	bl	8000f88 <_write>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_write_r+0x1e>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_write_r+0x1e>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000334 	.word	0x20000334

08004f48 <__errno>:
 8004f48:	4b01      	ldr	r3, [pc, #4]	@ (8004f50 <__errno+0x8>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20000018 	.word	0x20000018

08004f54 <__libc_init_array>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4d0d      	ldr	r5, [pc, #52]	@ (8004f8c <__libc_init_array+0x38>)
 8004f58:	4c0d      	ldr	r4, [pc, #52]	@ (8004f90 <__libc_init_array+0x3c>)
 8004f5a:	1b64      	subs	r4, r4, r5
 8004f5c:	10a4      	asrs	r4, r4, #2
 8004f5e:	2600      	movs	r6, #0
 8004f60:	42a6      	cmp	r6, r4
 8004f62:	d109      	bne.n	8004f78 <__libc_init_array+0x24>
 8004f64:	4d0b      	ldr	r5, [pc, #44]	@ (8004f94 <__libc_init_array+0x40>)
 8004f66:	4c0c      	ldr	r4, [pc, #48]	@ (8004f98 <__libc_init_array+0x44>)
 8004f68:	f000 fe3a 	bl	8005be0 <_init>
 8004f6c:	1b64      	subs	r4, r4, r5
 8004f6e:	10a4      	asrs	r4, r4, #2
 8004f70:	2600      	movs	r6, #0
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d105      	bne.n	8004f82 <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7c:	4798      	blx	r3
 8004f7e:	3601      	adds	r6, #1
 8004f80:	e7ee      	b.n	8004f60 <__libc_init_array+0xc>
 8004f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f86:	4798      	blx	r3
 8004f88:	3601      	adds	r6, #1
 8004f8a:	e7f2      	b.n	8004f72 <__libc_init_array+0x1e>
 8004f8c:	08005e00 	.word	0x08005e00
 8004f90:	08005e00 	.word	0x08005e00
 8004f94:	08005e00 	.word	0x08005e00
 8004f98:	08005e04 	.word	0x08005e04

08004f9c <__retarget_lock_init_recursive>:
 8004f9c:	4770      	bx	lr

08004f9e <__retarget_lock_acquire_recursive>:
 8004f9e:	4770      	bx	lr

08004fa0 <__retarget_lock_release_recursive>:
 8004fa0:	4770      	bx	lr
	...

08004fa4 <__assert_func>:
 8004fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fa6:	4614      	mov	r4, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <__assert_func+0x2c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4605      	mov	r5, r0
 8004fb0:	68d8      	ldr	r0, [r3, #12]
 8004fb2:	b954      	cbnz	r4, 8004fca <__assert_func+0x26>
 8004fb4:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <__assert_func+0x30>)
 8004fb6:	461c      	mov	r4, r3
 8004fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fbc:	9100      	str	r1, [sp, #0]
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	4905      	ldr	r1, [pc, #20]	@ (8004fd8 <__assert_func+0x34>)
 8004fc2:	f000 f9b9 	bl	8005338 <fiprintf>
 8004fc6:	f000 f9d9 	bl	800537c <abort>
 8004fca:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <__assert_func+0x38>)
 8004fcc:	e7f4      	b.n	8004fb8 <__assert_func+0x14>
 8004fce:	bf00      	nop
 8004fd0:	20000018 	.word	0x20000018
 8004fd4:	08005dc1 	.word	0x08005dc1
 8004fd8:	08005d93 	.word	0x08005d93
 8004fdc:	08005d86 	.word	0x08005d86

08004fe0 <_free_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d041      	beq.n	800506c <_free_r+0x8c>
 8004fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fec:	1f0c      	subs	r4, r1, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfb8      	it	lt
 8004ff2:	18e4      	addlt	r4, r4, r3
 8004ff4:	f000 f8e8 	bl	80051c8 <__malloc_lock>
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8005070 <_free_r+0x90>)
 8004ffa:	6813      	ldr	r3, [r2, #0]
 8004ffc:	b933      	cbnz	r3, 800500c <_free_r+0x2c>
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	6014      	str	r4, [r2, #0]
 8005002:	4628      	mov	r0, r5
 8005004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005008:	f000 b8e4 	b.w	80051d4 <__malloc_unlock>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d908      	bls.n	8005022 <_free_r+0x42>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1809      	addeq	r1, r1, r0
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	e7ed      	b.n	8004ffe <_free_r+0x1e>
 8005022:	461a      	mov	r2, r3
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b10b      	cbz	r3, 800502c <_free_r+0x4c>
 8005028:	42a3      	cmp	r3, r4
 800502a:	d9fa      	bls.n	8005022 <_free_r+0x42>
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	1850      	adds	r0, r2, r1
 8005030:	42a0      	cmp	r0, r4
 8005032:	d10b      	bne.n	800504c <_free_r+0x6c>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	4401      	add	r1, r0
 8005038:	1850      	adds	r0, r2, r1
 800503a:	4283      	cmp	r3, r0
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	d1e0      	bne.n	8005002 <_free_r+0x22>
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	6053      	str	r3, [r2, #4]
 8005046:	4408      	add	r0, r1
 8005048:	6010      	str	r0, [r2, #0]
 800504a:	e7da      	b.n	8005002 <_free_r+0x22>
 800504c:	d902      	bls.n	8005054 <_free_r+0x74>
 800504e:	230c      	movs	r3, #12
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	e7d6      	b.n	8005002 <_free_r+0x22>
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	1821      	adds	r1, r4, r0
 8005058:	428b      	cmp	r3, r1
 800505a:	bf04      	itt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	bf04      	itt	eq
 8005064:	1809      	addeq	r1, r1, r0
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	6054      	str	r4, [r2, #4]
 800506a:	e7ca      	b.n	8005002 <_free_r+0x22>
 800506c:	bd38      	pop	{r3, r4, r5, pc}
 800506e:	bf00      	nop
 8005070:	20000340 	.word	0x20000340

08005074 <malloc>:
 8005074:	4b02      	ldr	r3, [pc, #8]	@ (8005080 <malloc+0xc>)
 8005076:	4601      	mov	r1, r0
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f000 b825 	b.w	80050c8 <_malloc_r>
 800507e:	bf00      	nop
 8005080:	20000018 	.word	0x20000018

08005084 <sbrk_aligned>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4e0f      	ldr	r6, [pc, #60]	@ (80050c4 <sbrk_aligned+0x40>)
 8005088:	460c      	mov	r4, r1
 800508a:	6831      	ldr	r1, [r6, #0]
 800508c:	4605      	mov	r5, r0
 800508e:	b911      	cbnz	r1, 8005096 <sbrk_aligned+0x12>
 8005090:	f000 f964 	bl	800535c <_sbrk_r>
 8005094:	6030      	str	r0, [r6, #0]
 8005096:	4621      	mov	r1, r4
 8005098:	4628      	mov	r0, r5
 800509a:	f000 f95f 	bl	800535c <_sbrk_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d103      	bne.n	80050aa <sbrk_aligned+0x26>
 80050a2:	f04f 34ff 	mov.w	r4, #4294967295
 80050a6:	4620      	mov	r0, r4
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	1cc4      	adds	r4, r0, #3
 80050ac:	f024 0403 	bic.w	r4, r4, #3
 80050b0:	42a0      	cmp	r0, r4
 80050b2:	d0f8      	beq.n	80050a6 <sbrk_aligned+0x22>
 80050b4:	1a21      	subs	r1, r4, r0
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f950 	bl	800535c <_sbrk_r>
 80050bc:	3001      	adds	r0, #1
 80050be:	d1f2      	bne.n	80050a6 <sbrk_aligned+0x22>
 80050c0:	e7ef      	b.n	80050a2 <sbrk_aligned+0x1e>
 80050c2:	bf00      	nop
 80050c4:	2000033c 	.word	0x2000033c

080050c8 <_malloc_r>:
 80050c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050cc:	1ccd      	adds	r5, r1, #3
 80050ce:	f025 0503 	bic.w	r5, r5, #3
 80050d2:	3508      	adds	r5, #8
 80050d4:	2d0c      	cmp	r5, #12
 80050d6:	bf38      	it	cc
 80050d8:	250c      	movcc	r5, #12
 80050da:	2d00      	cmp	r5, #0
 80050dc:	4606      	mov	r6, r0
 80050de:	db01      	blt.n	80050e4 <_malloc_r+0x1c>
 80050e0:	42a9      	cmp	r1, r5
 80050e2:	d904      	bls.n	80050ee <_malloc_r+0x26>
 80050e4:	230c      	movs	r3, #12
 80050e6:	6033      	str	r3, [r6, #0]
 80050e8:	2000      	movs	r0, #0
 80050ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051c4 <_malloc_r+0xfc>
 80050f2:	f000 f869 	bl	80051c8 <__malloc_lock>
 80050f6:	f8d8 3000 	ldr.w	r3, [r8]
 80050fa:	461c      	mov	r4, r3
 80050fc:	bb44      	cbnz	r4, 8005150 <_malloc_r+0x88>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff ffbf 	bl	8005084 <sbrk_aligned>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	4604      	mov	r4, r0
 800510a:	d158      	bne.n	80051be <_malloc_r+0xf6>
 800510c:	f8d8 4000 	ldr.w	r4, [r8]
 8005110:	4627      	mov	r7, r4
 8005112:	2f00      	cmp	r7, #0
 8005114:	d143      	bne.n	800519e <_malloc_r+0xd6>
 8005116:	2c00      	cmp	r4, #0
 8005118:	d04b      	beq.n	80051b2 <_malloc_r+0xea>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4639      	mov	r1, r7
 800511e:	4630      	mov	r0, r6
 8005120:	eb04 0903 	add.w	r9, r4, r3
 8005124:	f000 f91a 	bl	800535c <_sbrk_r>
 8005128:	4581      	cmp	r9, r0
 800512a:	d142      	bne.n	80051b2 <_malloc_r+0xea>
 800512c:	6821      	ldr	r1, [r4, #0]
 800512e:	1a6d      	subs	r5, r5, r1
 8005130:	4629      	mov	r1, r5
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff ffa6 	bl	8005084 <sbrk_aligned>
 8005138:	3001      	adds	r0, #1
 800513a:	d03a      	beq.n	80051b2 <_malloc_r+0xea>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	442b      	add	r3, r5
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	f8d8 3000 	ldr.w	r3, [r8]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	bb62      	cbnz	r2, 80051a4 <_malloc_r+0xdc>
 800514a:	f8c8 7000 	str.w	r7, [r8]
 800514e:	e00f      	b.n	8005170 <_malloc_r+0xa8>
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	1b52      	subs	r2, r2, r5
 8005154:	d420      	bmi.n	8005198 <_malloc_r+0xd0>
 8005156:	2a0b      	cmp	r2, #11
 8005158:	d917      	bls.n	800518a <_malloc_r+0xc2>
 800515a:	1961      	adds	r1, r4, r5
 800515c:	42a3      	cmp	r3, r4
 800515e:	6025      	str	r5, [r4, #0]
 8005160:	bf18      	it	ne
 8005162:	6059      	strne	r1, [r3, #4]
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	bf08      	it	eq
 8005168:	f8c8 1000 	streq.w	r1, [r8]
 800516c:	5162      	str	r2, [r4, r5]
 800516e:	604b      	str	r3, [r1, #4]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f82f 	bl	80051d4 <__malloc_unlock>
 8005176:	f104 000b 	add.w	r0, r4, #11
 800517a:	1d23      	adds	r3, r4, #4
 800517c:	f020 0007 	bic.w	r0, r0, #7
 8005180:	1ac2      	subs	r2, r0, r3
 8005182:	bf1c      	itt	ne
 8005184:	1a1b      	subne	r3, r3, r0
 8005186:	50a3      	strne	r3, [r4, r2]
 8005188:	e7af      	b.n	80050ea <_malloc_r+0x22>
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	42a3      	cmp	r3, r4
 800518e:	bf0c      	ite	eq
 8005190:	f8c8 2000 	streq.w	r2, [r8]
 8005194:	605a      	strne	r2, [r3, #4]
 8005196:	e7eb      	b.n	8005170 <_malloc_r+0xa8>
 8005198:	4623      	mov	r3, r4
 800519a:	6864      	ldr	r4, [r4, #4]
 800519c:	e7ae      	b.n	80050fc <_malloc_r+0x34>
 800519e:	463c      	mov	r4, r7
 80051a0:	687f      	ldr	r7, [r7, #4]
 80051a2:	e7b6      	b.n	8005112 <_malloc_r+0x4a>
 80051a4:	461a      	mov	r2, r3
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	42a3      	cmp	r3, r4
 80051aa:	d1fb      	bne.n	80051a4 <_malloc_r+0xdc>
 80051ac:	2300      	movs	r3, #0
 80051ae:	6053      	str	r3, [r2, #4]
 80051b0:	e7de      	b.n	8005170 <_malloc_r+0xa8>
 80051b2:	230c      	movs	r3, #12
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f80c 	bl	80051d4 <__malloc_unlock>
 80051bc:	e794      	b.n	80050e8 <_malloc_r+0x20>
 80051be:	6005      	str	r5, [r0, #0]
 80051c0:	e7d6      	b.n	8005170 <_malloc_r+0xa8>
 80051c2:	bf00      	nop
 80051c4:	20000340 	.word	0x20000340

080051c8 <__malloc_lock>:
 80051c8:	4801      	ldr	r0, [pc, #4]	@ (80051d0 <__malloc_lock+0x8>)
 80051ca:	f7ff bee8 	b.w	8004f9e <__retarget_lock_acquire_recursive>
 80051ce:	bf00      	nop
 80051d0:	20000338 	.word	0x20000338

080051d4 <__malloc_unlock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	@ (80051dc <__malloc_unlock+0x8>)
 80051d6:	f7ff bee3 	b.w	8004fa0 <__retarget_lock_release_recursive>
 80051da:	bf00      	nop
 80051dc:	20000338 	.word	0x20000338

080051e0 <__sflush_r>:
 80051e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	0716      	lsls	r6, r2, #28
 80051ea:	4605      	mov	r5, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	d454      	bmi.n	800529a <__sflush_r+0xba>
 80051f0:	684b      	ldr	r3, [r1, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dc02      	bgt.n	80051fc <__sflush_r+0x1c>
 80051f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dd48      	ble.n	800528e <__sflush_r+0xae>
 80051fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051fe:	2e00      	cmp	r6, #0
 8005200:	d045      	beq.n	800528e <__sflush_r+0xae>
 8005202:	2300      	movs	r3, #0
 8005204:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005208:	682f      	ldr	r7, [r5, #0]
 800520a:	6a21      	ldr	r1, [r4, #32]
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	d030      	beq.n	8005272 <__sflush_r+0x92>
 8005210:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	0759      	lsls	r1, r3, #29
 8005216:	d505      	bpl.n	8005224 <__sflush_r+0x44>
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800521e:	b10b      	cbz	r3, 8005224 <__sflush_r+0x44>
 8005220:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005228:	6a21      	ldr	r1, [r4, #32]
 800522a:	4628      	mov	r0, r5
 800522c:	47b0      	blx	r6
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	d106      	bne.n	8005242 <__sflush_r+0x62>
 8005234:	6829      	ldr	r1, [r5, #0]
 8005236:	291d      	cmp	r1, #29
 8005238:	d82b      	bhi.n	8005292 <__sflush_r+0xb2>
 800523a:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <__sflush_r+0x104>)
 800523c:	410a      	asrs	r2, r1
 800523e:	07d6      	lsls	r6, r2, #31
 8005240:	d427      	bmi.n	8005292 <__sflush_r+0xb2>
 8005242:	2200      	movs	r2, #0
 8005244:	6062      	str	r2, [r4, #4]
 8005246:	04d9      	lsls	r1, r3, #19
 8005248:	6922      	ldr	r2, [r4, #16]
 800524a:	6022      	str	r2, [r4, #0]
 800524c:	d504      	bpl.n	8005258 <__sflush_r+0x78>
 800524e:	1c42      	adds	r2, r0, #1
 8005250:	d101      	bne.n	8005256 <__sflush_r+0x76>
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	b903      	cbnz	r3, 8005258 <__sflush_r+0x78>
 8005256:	6560      	str	r0, [r4, #84]	@ 0x54
 8005258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800525a:	602f      	str	r7, [r5, #0]
 800525c:	b1b9      	cbz	r1, 800528e <__sflush_r+0xae>
 800525e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005262:	4299      	cmp	r1, r3
 8005264:	d002      	beq.n	800526c <__sflush_r+0x8c>
 8005266:	4628      	mov	r0, r5
 8005268:	f7ff feba 	bl	8004fe0 <_free_r>
 800526c:	2300      	movs	r3, #0
 800526e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005270:	e00d      	b.n	800528e <__sflush_r+0xae>
 8005272:	2301      	movs	r3, #1
 8005274:	4628      	mov	r0, r5
 8005276:	47b0      	blx	r6
 8005278:	4602      	mov	r2, r0
 800527a:	1c50      	adds	r0, r2, #1
 800527c:	d1c9      	bne.n	8005212 <__sflush_r+0x32>
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0c6      	beq.n	8005212 <__sflush_r+0x32>
 8005284:	2b1d      	cmp	r3, #29
 8005286:	d001      	beq.n	800528c <__sflush_r+0xac>
 8005288:	2b16      	cmp	r3, #22
 800528a:	d11e      	bne.n	80052ca <__sflush_r+0xea>
 800528c:	602f      	str	r7, [r5, #0]
 800528e:	2000      	movs	r0, #0
 8005290:	e022      	b.n	80052d8 <__sflush_r+0xf8>
 8005292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005296:	b21b      	sxth	r3, r3
 8005298:	e01b      	b.n	80052d2 <__sflush_r+0xf2>
 800529a:	690f      	ldr	r7, [r1, #16]
 800529c:	2f00      	cmp	r7, #0
 800529e:	d0f6      	beq.n	800528e <__sflush_r+0xae>
 80052a0:	0793      	lsls	r3, r2, #30
 80052a2:	680e      	ldr	r6, [r1, #0]
 80052a4:	bf08      	it	eq
 80052a6:	694b      	ldreq	r3, [r1, #20]
 80052a8:	600f      	str	r7, [r1, #0]
 80052aa:	bf18      	it	ne
 80052ac:	2300      	movne	r3, #0
 80052ae:	eba6 0807 	sub.w	r8, r6, r7
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	f1b8 0f00 	cmp.w	r8, #0
 80052b8:	dde9      	ble.n	800528e <__sflush_r+0xae>
 80052ba:	6a21      	ldr	r1, [r4, #32]
 80052bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052be:	4643      	mov	r3, r8
 80052c0:	463a      	mov	r2, r7
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b0      	blx	r6
 80052c6:	2800      	cmp	r0, #0
 80052c8:	dc08      	bgt.n	80052dc <__sflush_r+0xfc>
 80052ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052dc:	4407      	add	r7, r0
 80052de:	eba8 0800 	sub.w	r8, r8, r0
 80052e2:	e7e7      	b.n	80052b4 <__sflush_r+0xd4>
 80052e4:	dfbffffe 	.word	0xdfbffffe

080052e8 <_fflush_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	690b      	ldr	r3, [r1, #16]
 80052ec:	4605      	mov	r5, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	b913      	cbnz	r3, 80052f8 <_fflush_r+0x10>
 80052f2:	2500      	movs	r5, #0
 80052f4:	4628      	mov	r0, r5
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	b118      	cbz	r0, 8005302 <_fflush_r+0x1a>
 80052fa:	6a03      	ldr	r3, [r0, #32]
 80052fc:	b90b      	cbnz	r3, 8005302 <_fflush_r+0x1a>
 80052fe:	f7ff fcff 	bl	8004d00 <__sinit>
 8005302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f3      	beq.n	80052f2 <_fflush_r+0xa>
 800530a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800530c:	07d0      	lsls	r0, r2, #31
 800530e:	d404      	bmi.n	800531a <_fflush_r+0x32>
 8005310:	0599      	lsls	r1, r3, #22
 8005312:	d402      	bmi.n	800531a <_fflush_r+0x32>
 8005314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005316:	f7ff fe42 	bl	8004f9e <__retarget_lock_acquire_recursive>
 800531a:	4628      	mov	r0, r5
 800531c:	4621      	mov	r1, r4
 800531e:	f7ff ff5f 	bl	80051e0 <__sflush_r>
 8005322:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005324:	07da      	lsls	r2, r3, #31
 8005326:	4605      	mov	r5, r0
 8005328:	d4e4      	bmi.n	80052f4 <_fflush_r+0xc>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	d4e1      	bmi.n	80052f4 <_fflush_r+0xc>
 8005330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005332:	f7ff fe35 	bl	8004fa0 <__retarget_lock_release_recursive>
 8005336:	e7dd      	b.n	80052f4 <_fflush_r+0xc>

08005338 <fiprintf>:
 8005338:	b40e      	push	{r1, r2, r3}
 800533a:	b503      	push	{r0, r1, lr}
 800533c:	4601      	mov	r1, r0
 800533e:	ab03      	add	r3, sp, #12
 8005340:	4805      	ldr	r0, [pc, #20]	@ (8005358 <fiprintf+0x20>)
 8005342:	f853 2b04 	ldr.w	r2, [r3], #4
 8005346:	6800      	ldr	r0, [r0, #0]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	f000 f847 	bl	80053dc <_vfiprintf_r>
 800534e:	b002      	add	sp, #8
 8005350:	f85d eb04 	ldr.w	lr, [sp], #4
 8005354:	b003      	add	sp, #12
 8005356:	4770      	bx	lr
 8005358:	20000018 	.word	0x20000018

0800535c <_sbrk_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d06      	ldr	r5, [pc, #24]	@ (8005378 <_sbrk_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f7fb fe5e 	bl	8001028 <_sbrk>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_sbrk_r+0x1a>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_sbrk_r+0x1a>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000334 	.word	0x20000334

0800537c <abort>:
 800537c:	b508      	push	{r3, lr}
 800537e:	2006      	movs	r0, #6
 8005380:	f000 fb8e 	bl	8005aa0 <raise>
 8005384:	2001      	movs	r0, #1
 8005386:	f7fb fdd7 	bl	8000f38 <_exit>

0800538a <__sfputc_r>:
 800538a:	6893      	ldr	r3, [r2, #8]
 800538c:	3b01      	subs	r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	b410      	push	{r4}
 8005392:	6093      	str	r3, [r2, #8]
 8005394:	da08      	bge.n	80053a8 <__sfputc_r+0x1e>
 8005396:	6994      	ldr	r4, [r2, #24]
 8005398:	42a3      	cmp	r3, r4
 800539a:	db01      	blt.n	80053a0 <__sfputc_r+0x16>
 800539c:	290a      	cmp	r1, #10
 800539e:	d103      	bne.n	80053a8 <__sfputc_r+0x1e>
 80053a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a4:	f000 bac0 	b.w	8005928 <__swbuf_r>
 80053a8:	6813      	ldr	r3, [r2, #0]
 80053aa:	1c58      	adds	r0, r3, #1
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	7019      	strb	r1, [r3, #0]
 80053b0:	4608      	mov	r0, r1
 80053b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <__sfputs_r>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	18d5      	adds	r5, r2, r3
 80053c2:	42ac      	cmp	r4, r5
 80053c4:	d101      	bne.n	80053ca <__sfputs_r+0x12>
 80053c6:	2000      	movs	r0, #0
 80053c8:	e007      	b.n	80053da <__sfputs_r+0x22>
 80053ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ce:	463a      	mov	r2, r7
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff ffda 	bl	800538a <__sfputc_r>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d1f3      	bne.n	80053c2 <__sfputs_r+0xa>
 80053da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053dc <_vfiprintf_r>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	460d      	mov	r5, r1
 80053e2:	b09d      	sub	sp, #116	@ 0x74
 80053e4:	4614      	mov	r4, r2
 80053e6:	4698      	mov	r8, r3
 80053e8:	4606      	mov	r6, r0
 80053ea:	b118      	cbz	r0, 80053f4 <_vfiprintf_r+0x18>
 80053ec:	6a03      	ldr	r3, [r0, #32]
 80053ee:	b90b      	cbnz	r3, 80053f4 <_vfiprintf_r+0x18>
 80053f0:	f7ff fc86 	bl	8004d00 <__sinit>
 80053f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053f6:	07d9      	lsls	r1, r3, #31
 80053f8:	d405      	bmi.n	8005406 <_vfiprintf_r+0x2a>
 80053fa:	89ab      	ldrh	r3, [r5, #12]
 80053fc:	059a      	lsls	r2, r3, #22
 80053fe:	d402      	bmi.n	8005406 <_vfiprintf_r+0x2a>
 8005400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005402:	f7ff fdcc 	bl	8004f9e <__retarget_lock_acquire_recursive>
 8005406:	89ab      	ldrh	r3, [r5, #12]
 8005408:	071b      	lsls	r3, r3, #28
 800540a:	d501      	bpl.n	8005410 <_vfiprintf_r+0x34>
 800540c:	692b      	ldr	r3, [r5, #16]
 800540e:	b99b      	cbnz	r3, 8005438 <_vfiprintf_r+0x5c>
 8005410:	4629      	mov	r1, r5
 8005412:	4630      	mov	r0, r6
 8005414:	f000 fac6 	bl	80059a4 <__swsetup_r>
 8005418:	b170      	cbz	r0, 8005438 <_vfiprintf_r+0x5c>
 800541a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800541c:	07dc      	lsls	r4, r3, #31
 800541e:	d504      	bpl.n	800542a <_vfiprintf_r+0x4e>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b01d      	add	sp, #116	@ 0x74
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	0598      	lsls	r0, r3, #22
 800542e:	d4f7      	bmi.n	8005420 <_vfiprintf_r+0x44>
 8005430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005432:	f7ff fdb5 	bl	8004fa0 <__retarget_lock_release_recursive>
 8005436:	e7f3      	b.n	8005420 <_vfiprintf_r+0x44>
 8005438:	2300      	movs	r3, #0
 800543a:	9309      	str	r3, [sp, #36]	@ 0x24
 800543c:	2320      	movs	r3, #32
 800543e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005442:	f8cd 800c 	str.w	r8, [sp, #12]
 8005446:	2330      	movs	r3, #48	@ 0x30
 8005448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80055f8 <_vfiprintf_r+0x21c>
 800544c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005450:	f04f 0901 	mov.w	r9, #1
 8005454:	4623      	mov	r3, r4
 8005456:	469a      	mov	sl, r3
 8005458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800545c:	b10a      	cbz	r2, 8005462 <_vfiprintf_r+0x86>
 800545e:	2a25      	cmp	r2, #37	@ 0x25
 8005460:	d1f9      	bne.n	8005456 <_vfiprintf_r+0x7a>
 8005462:	ebba 0b04 	subs.w	fp, sl, r4
 8005466:	d00b      	beq.n	8005480 <_vfiprintf_r+0xa4>
 8005468:	465b      	mov	r3, fp
 800546a:	4622      	mov	r2, r4
 800546c:	4629      	mov	r1, r5
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ffa2 	bl	80053b8 <__sfputs_r>
 8005474:	3001      	adds	r0, #1
 8005476:	f000 80a7 	beq.w	80055c8 <_vfiprintf_r+0x1ec>
 800547a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800547c:	445a      	add	r2, fp
 800547e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005480:	f89a 3000 	ldrb.w	r3, [sl]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 809f 	beq.w	80055c8 <_vfiprintf_r+0x1ec>
 800548a:	2300      	movs	r3, #0
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005494:	f10a 0a01 	add.w	sl, sl, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80054a2:	4654      	mov	r4, sl
 80054a4:	2205      	movs	r2, #5
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	4853      	ldr	r0, [pc, #332]	@ (80055f8 <_vfiprintf_r+0x21c>)
 80054ac:	f7fa fe98 	bl	80001e0 <memchr>
 80054b0:	9a04      	ldr	r2, [sp, #16]
 80054b2:	b9d8      	cbnz	r0, 80054ec <_vfiprintf_r+0x110>
 80054b4:	06d1      	lsls	r1, r2, #27
 80054b6:	bf44      	itt	mi
 80054b8:	2320      	movmi	r3, #32
 80054ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054be:	0713      	lsls	r3, r2, #28
 80054c0:	bf44      	itt	mi
 80054c2:	232b      	movmi	r3, #43	@ 0x2b
 80054c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054c8:	f89a 3000 	ldrb.w	r3, [sl]
 80054cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ce:	d015      	beq.n	80054fc <_vfiprintf_r+0x120>
 80054d0:	9a07      	ldr	r2, [sp, #28]
 80054d2:	4654      	mov	r4, sl
 80054d4:	2000      	movs	r0, #0
 80054d6:	f04f 0c0a 	mov.w	ip, #10
 80054da:	4621      	mov	r1, r4
 80054dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e0:	3b30      	subs	r3, #48	@ 0x30
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	d94b      	bls.n	800557e <_vfiprintf_r+0x1a2>
 80054e6:	b1b0      	cbz	r0, 8005516 <_vfiprintf_r+0x13a>
 80054e8:	9207      	str	r2, [sp, #28]
 80054ea:	e014      	b.n	8005516 <_vfiprintf_r+0x13a>
 80054ec:	eba0 0308 	sub.w	r3, r0, r8
 80054f0:	fa09 f303 	lsl.w	r3, r9, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	9304      	str	r3, [sp, #16]
 80054f8:	46a2      	mov	sl, r4
 80054fa:	e7d2      	b.n	80054a2 <_vfiprintf_r+0xc6>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	1d19      	adds	r1, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	9103      	str	r1, [sp, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfbb      	ittet	lt
 8005508:	425b      	neglt	r3, r3
 800550a:	f042 0202 	orrlt.w	r2, r2, #2
 800550e:	9307      	strge	r3, [sp, #28]
 8005510:	9307      	strlt	r3, [sp, #28]
 8005512:	bfb8      	it	lt
 8005514:	9204      	strlt	r2, [sp, #16]
 8005516:	7823      	ldrb	r3, [r4, #0]
 8005518:	2b2e      	cmp	r3, #46	@ 0x2e
 800551a:	d10a      	bne.n	8005532 <_vfiprintf_r+0x156>
 800551c:	7863      	ldrb	r3, [r4, #1]
 800551e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005520:	d132      	bne.n	8005588 <_vfiprintf_r+0x1ac>
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	1d1a      	adds	r2, r3, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	9203      	str	r2, [sp, #12]
 800552a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800552e:	3402      	adds	r4, #2
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005608 <_vfiprintf_r+0x22c>
 8005536:	7821      	ldrb	r1, [r4, #0]
 8005538:	2203      	movs	r2, #3
 800553a:	4650      	mov	r0, sl
 800553c:	f7fa fe50 	bl	80001e0 <memchr>
 8005540:	b138      	cbz	r0, 8005552 <_vfiprintf_r+0x176>
 8005542:	9b04      	ldr	r3, [sp, #16]
 8005544:	eba0 000a 	sub.w	r0, r0, sl
 8005548:	2240      	movs	r2, #64	@ 0x40
 800554a:	4082      	lsls	r2, r0
 800554c:	4313      	orrs	r3, r2
 800554e:	3401      	adds	r4, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005556:	4829      	ldr	r0, [pc, #164]	@ (80055fc <_vfiprintf_r+0x220>)
 8005558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800555c:	2206      	movs	r2, #6
 800555e:	f7fa fe3f 	bl	80001e0 <memchr>
 8005562:	2800      	cmp	r0, #0
 8005564:	d03f      	beq.n	80055e6 <_vfiprintf_r+0x20a>
 8005566:	4b26      	ldr	r3, [pc, #152]	@ (8005600 <_vfiprintf_r+0x224>)
 8005568:	bb1b      	cbnz	r3, 80055b2 <_vfiprintf_r+0x1d6>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	3307      	adds	r3, #7
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	3308      	adds	r3, #8
 8005574:	9303      	str	r3, [sp, #12]
 8005576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005578:	443b      	add	r3, r7
 800557a:	9309      	str	r3, [sp, #36]	@ 0x24
 800557c:	e76a      	b.n	8005454 <_vfiprintf_r+0x78>
 800557e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005582:	460c      	mov	r4, r1
 8005584:	2001      	movs	r0, #1
 8005586:	e7a8      	b.n	80054da <_vfiprintf_r+0xfe>
 8005588:	2300      	movs	r3, #0
 800558a:	3401      	adds	r4, #1
 800558c:	9305      	str	r3, [sp, #20]
 800558e:	4619      	mov	r1, r3
 8005590:	f04f 0c0a 	mov.w	ip, #10
 8005594:	4620      	mov	r0, r4
 8005596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800559a:	3a30      	subs	r2, #48	@ 0x30
 800559c:	2a09      	cmp	r2, #9
 800559e:	d903      	bls.n	80055a8 <_vfiprintf_r+0x1cc>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0c6      	beq.n	8005532 <_vfiprintf_r+0x156>
 80055a4:	9105      	str	r1, [sp, #20]
 80055a6:	e7c4      	b.n	8005532 <_vfiprintf_r+0x156>
 80055a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80055ac:	4604      	mov	r4, r0
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7f0      	b.n	8005594 <_vfiprintf_r+0x1b8>
 80055b2:	ab03      	add	r3, sp, #12
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <_vfiprintf_r+0x228>)
 80055ba:	a904      	add	r1, sp, #16
 80055bc:	4630      	mov	r0, r6
 80055be:	f3af 8000 	nop.w
 80055c2:	4607      	mov	r7, r0
 80055c4:	1c78      	adds	r0, r7, #1
 80055c6:	d1d6      	bne.n	8005576 <_vfiprintf_r+0x19a>
 80055c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	d405      	bmi.n	80055da <_vfiprintf_r+0x1fe>
 80055ce:	89ab      	ldrh	r3, [r5, #12]
 80055d0:	059a      	lsls	r2, r3, #22
 80055d2:	d402      	bmi.n	80055da <_vfiprintf_r+0x1fe>
 80055d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055d6:	f7ff fce3 	bl	8004fa0 <__retarget_lock_release_recursive>
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	065b      	lsls	r3, r3, #25
 80055de:	f53f af1f 	bmi.w	8005420 <_vfiprintf_r+0x44>
 80055e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055e4:	e71e      	b.n	8005424 <_vfiprintf_r+0x48>
 80055e6:	ab03      	add	r3, sp, #12
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	462a      	mov	r2, r5
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <_vfiprintf_r+0x228>)
 80055ee:	a904      	add	r1, sp, #16
 80055f0:	4630      	mov	r0, r6
 80055f2:	f000 f879 	bl	80056e8 <_printf_i>
 80055f6:	e7e4      	b.n	80055c2 <_vfiprintf_r+0x1e6>
 80055f8:	08005dc2 	.word	0x08005dc2
 80055fc:	08005dcc 	.word	0x08005dcc
 8005600:	00000000 	.word	0x00000000
 8005604:	080053b9 	.word	0x080053b9
 8005608:	08005dc8 	.word	0x08005dc8

0800560c <_printf_common>:
 800560c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005610:	4616      	mov	r6, r2
 8005612:	4698      	mov	r8, r3
 8005614:	688a      	ldr	r2, [r1, #8]
 8005616:	690b      	ldr	r3, [r1, #16]
 8005618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800561c:	4293      	cmp	r3, r2
 800561e:	bfb8      	it	lt
 8005620:	4613      	movlt	r3, r2
 8005622:	6033      	str	r3, [r6, #0]
 8005624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005628:	4607      	mov	r7, r0
 800562a:	460c      	mov	r4, r1
 800562c:	b10a      	cbz	r2, 8005632 <_printf_common+0x26>
 800562e:	3301      	adds	r3, #1
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	0699      	lsls	r1, r3, #26
 8005636:	bf42      	ittt	mi
 8005638:	6833      	ldrmi	r3, [r6, #0]
 800563a:	3302      	addmi	r3, #2
 800563c:	6033      	strmi	r3, [r6, #0]
 800563e:	6825      	ldr	r5, [r4, #0]
 8005640:	f015 0506 	ands.w	r5, r5, #6
 8005644:	d106      	bne.n	8005654 <_printf_common+0x48>
 8005646:	f104 0a19 	add.w	sl, r4, #25
 800564a:	68e3      	ldr	r3, [r4, #12]
 800564c:	6832      	ldr	r2, [r6, #0]
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	42ab      	cmp	r3, r5
 8005652:	dc26      	bgt.n	80056a2 <_printf_common+0x96>
 8005654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	3b00      	subs	r3, #0
 800565c:	bf18      	it	ne
 800565e:	2301      	movne	r3, #1
 8005660:	0692      	lsls	r2, r2, #26
 8005662:	d42b      	bmi.n	80056bc <_printf_common+0xb0>
 8005664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005668:	4641      	mov	r1, r8
 800566a:	4638      	mov	r0, r7
 800566c:	47c8      	blx	r9
 800566e:	3001      	adds	r0, #1
 8005670:	d01e      	beq.n	80056b0 <_printf_common+0xa4>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	6922      	ldr	r2, [r4, #16]
 8005676:	f003 0306 	and.w	r3, r3, #6
 800567a:	2b04      	cmp	r3, #4
 800567c:	bf02      	ittt	eq
 800567e:	68e5      	ldreq	r5, [r4, #12]
 8005680:	6833      	ldreq	r3, [r6, #0]
 8005682:	1aed      	subeq	r5, r5, r3
 8005684:	68a3      	ldr	r3, [r4, #8]
 8005686:	bf0c      	ite	eq
 8005688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800568c:	2500      	movne	r5, #0
 800568e:	4293      	cmp	r3, r2
 8005690:	bfc4      	itt	gt
 8005692:	1a9b      	subgt	r3, r3, r2
 8005694:	18ed      	addgt	r5, r5, r3
 8005696:	2600      	movs	r6, #0
 8005698:	341a      	adds	r4, #26
 800569a:	42b5      	cmp	r5, r6
 800569c:	d11a      	bne.n	80056d4 <_printf_common+0xc8>
 800569e:	2000      	movs	r0, #0
 80056a0:	e008      	b.n	80056b4 <_printf_common+0xa8>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4652      	mov	r2, sl
 80056a6:	4641      	mov	r1, r8
 80056a8:	4638      	mov	r0, r7
 80056aa:	47c8      	blx	r9
 80056ac:	3001      	adds	r0, #1
 80056ae:	d103      	bne.n	80056b8 <_printf_common+0xac>
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	3501      	adds	r5, #1
 80056ba:	e7c6      	b.n	800564a <_printf_common+0x3e>
 80056bc:	18e1      	adds	r1, r4, r3
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	2030      	movs	r0, #48	@ 0x30
 80056c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056c6:	4422      	add	r2, r4
 80056c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056d0:	3302      	adds	r3, #2
 80056d2:	e7c7      	b.n	8005664 <_printf_common+0x58>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4622      	mov	r2, r4
 80056d8:	4641      	mov	r1, r8
 80056da:	4638      	mov	r0, r7
 80056dc:	47c8      	blx	r9
 80056de:	3001      	adds	r0, #1
 80056e0:	d0e6      	beq.n	80056b0 <_printf_common+0xa4>
 80056e2:	3601      	adds	r6, #1
 80056e4:	e7d9      	b.n	800569a <_printf_common+0x8e>
	...

080056e8 <_printf_i>:
 80056e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ec:	7e0f      	ldrb	r7, [r1, #24]
 80056ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056f0:	2f78      	cmp	r7, #120	@ 0x78
 80056f2:	4691      	mov	r9, r2
 80056f4:	4680      	mov	r8, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	469a      	mov	sl, r3
 80056fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056fe:	d807      	bhi.n	8005710 <_printf_i+0x28>
 8005700:	2f62      	cmp	r7, #98	@ 0x62
 8005702:	d80a      	bhi.n	800571a <_printf_i+0x32>
 8005704:	2f00      	cmp	r7, #0
 8005706:	f000 80d2 	beq.w	80058ae <_printf_i+0x1c6>
 800570a:	2f58      	cmp	r7, #88	@ 0x58
 800570c:	f000 80b9 	beq.w	8005882 <_printf_i+0x19a>
 8005710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005718:	e03a      	b.n	8005790 <_printf_i+0xa8>
 800571a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800571e:	2b15      	cmp	r3, #21
 8005720:	d8f6      	bhi.n	8005710 <_printf_i+0x28>
 8005722:	a101      	add	r1, pc, #4	@ (adr r1, 8005728 <_printf_i+0x40>)
 8005724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005728:	08005781 	.word	0x08005781
 800572c:	08005795 	.word	0x08005795
 8005730:	08005711 	.word	0x08005711
 8005734:	08005711 	.word	0x08005711
 8005738:	08005711 	.word	0x08005711
 800573c:	08005711 	.word	0x08005711
 8005740:	08005795 	.word	0x08005795
 8005744:	08005711 	.word	0x08005711
 8005748:	08005711 	.word	0x08005711
 800574c:	08005711 	.word	0x08005711
 8005750:	08005711 	.word	0x08005711
 8005754:	08005895 	.word	0x08005895
 8005758:	080057bf 	.word	0x080057bf
 800575c:	0800584f 	.word	0x0800584f
 8005760:	08005711 	.word	0x08005711
 8005764:	08005711 	.word	0x08005711
 8005768:	080058b7 	.word	0x080058b7
 800576c:	08005711 	.word	0x08005711
 8005770:	080057bf 	.word	0x080057bf
 8005774:	08005711 	.word	0x08005711
 8005778:	08005711 	.word	0x08005711
 800577c:	08005857 	.word	0x08005857
 8005780:	6833      	ldr	r3, [r6, #0]
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6032      	str	r2, [r6, #0]
 8005788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800578c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005790:	2301      	movs	r3, #1
 8005792:	e09d      	b.n	80058d0 <_printf_i+0x1e8>
 8005794:	6833      	ldr	r3, [r6, #0]
 8005796:	6820      	ldr	r0, [r4, #0]
 8005798:	1d19      	adds	r1, r3, #4
 800579a:	6031      	str	r1, [r6, #0]
 800579c:	0606      	lsls	r6, r0, #24
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0xbc>
 80057a0:	681d      	ldr	r5, [r3, #0]
 80057a2:	e003      	b.n	80057ac <_printf_i+0xc4>
 80057a4:	0645      	lsls	r5, r0, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0xb8>
 80057a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057ac:	2d00      	cmp	r5, #0
 80057ae:	da03      	bge.n	80057b8 <_printf_i+0xd0>
 80057b0:	232d      	movs	r3, #45	@ 0x2d
 80057b2:	426d      	negs	r5, r5
 80057b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057b8:	4859      	ldr	r0, [pc, #356]	@ (8005920 <_printf_i+0x238>)
 80057ba:	230a      	movs	r3, #10
 80057bc:	e011      	b.n	80057e2 <_printf_i+0xfa>
 80057be:	6821      	ldr	r1, [r4, #0]
 80057c0:	6833      	ldr	r3, [r6, #0]
 80057c2:	0608      	lsls	r0, r1, #24
 80057c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80057c8:	d402      	bmi.n	80057d0 <_printf_i+0xe8>
 80057ca:	0649      	lsls	r1, r1, #25
 80057cc:	bf48      	it	mi
 80057ce:	b2ad      	uxthmi	r5, r5
 80057d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80057d2:	4853      	ldr	r0, [pc, #332]	@ (8005920 <_printf_i+0x238>)
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	bf14      	ite	ne
 80057d8:	230a      	movne	r3, #10
 80057da:	2308      	moveq	r3, #8
 80057dc:	2100      	movs	r1, #0
 80057de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057e2:	6866      	ldr	r6, [r4, #4]
 80057e4:	60a6      	str	r6, [r4, #8]
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	bfa2      	ittt	ge
 80057ea:	6821      	ldrge	r1, [r4, #0]
 80057ec:	f021 0104 	bicge.w	r1, r1, #4
 80057f0:	6021      	strge	r1, [r4, #0]
 80057f2:	b90d      	cbnz	r5, 80057f8 <_printf_i+0x110>
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	d04b      	beq.n	8005890 <_printf_i+0x1a8>
 80057f8:	4616      	mov	r6, r2
 80057fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80057fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005802:	5dc7      	ldrb	r7, [r0, r7]
 8005804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005808:	462f      	mov	r7, r5
 800580a:	42bb      	cmp	r3, r7
 800580c:	460d      	mov	r5, r1
 800580e:	d9f4      	bls.n	80057fa <_printf_i+0x112>
 8005810:	2b08      	cmp	r3, #8
 8005812:	d10b      	bne.n	800582c <_printf_i+0x144>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07df      	lsls	r7, r3, #31
 8005818:	d508      	bpl.n	800582c <_printf_i+0x144>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	6861      	ldr	r1, [r4, #4]
 800581e:	4299      	cmp	r1, r3
 8005820:	bfde      	ittt	le
 8005822:	2330      	movle	r3, #48	@ 0x30
 8005824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005828:	f106 36ff 	addle.w	r6, r6, #4294967295
 800582c:	1b92      	subs	r2, r2, r6
 800582e:	6122      	str	r2, [r4, #16]
 8005830:	f8cd a000 	str.w	sl, [sp]
 8005834:	464b      	mov	r3, r9
 8005836:	aa03      	add	r2, sp, #12
 8005838:	4621      	mov	r1, r4
 800583a:	4640      	mov	r0, r8
 800583c:	f7ff fee6 	bl	800560c <_printf_common>
 8005840:	3001      	adds	r0, #1
 8005842:	d14a      	bne.n	80058da <_printf_i+0x1f2>
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	b004      	add	sp, #16
 800584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	f043 0320 	orr.w	r3, r3, #32
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	4833      	ldr	r0, [pc, #204]	@ (8005924 <_printf_i+0x23c>)
 8005858:	2778      	movs	r7, #120	@ 0x78
 800585a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	6831      	ldr	r1, [r6, #0]
 8005862:	061f      	lsls	r7, r3, #24
 8005864:	f851 5b04 	ldr.w	r5, [r1], #4
 8005868:	d402      	bmi.n	8005870 <_printf_i+0x188>
 800586a:	065f      	lsls	r7, r3, #25
 800586c:	bf48      	it	mi
 800586e:	b2ad      	uxthmi	r5, r5
 8005870:	6031      	str	r1, [r6, #0]
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	bf44      	itt	mi
 8005876:	f043 0320 	orrmi.w	r3, r3, #32
 800587a:	6023      	strmi	r3, [r4, #0]
 800587c:	b11d      	cbz	r5, 8005886 <_printf_i+0x19e>
 800587e:	2310      	movs	r3, #16
 8005880:	e7ac      	b.n	80057dc <_printf_i+0xf4>
 8005882:	4827      	ldr	r0, [pc, #156]	@ (8005920 <_printf_i+0x238>)
 8005884:	e7e9      	b.n	800585a <_printf_i+0x172>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	f023 0320 	bic.w	r3, r3, #32
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	e7f6      	b.n	800587e <_printf_i+0x196>
 8005890:	4616      	mov	r6, r2
 8005892:	e7bd      	b.n	8005810 <_printf_i+0x128>
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	6961      	ldr	r1, [r4, #20]
 800589a:	1d18      	adds	r0, r3, #4
 800589c:	6030      	str	r0, [r6, #0]
 800589e:	062e      	lsls	r6, r5, #24
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	d501      	bpl.n	80058a8 <_printf_i+0x1c0>
 80058a4:	6019      	str	r1, [r3, #0]
 80058a6:	e002      	b.n	80058ae <_printf_i+0x1c6>
 80058a8:	0668      	lsls	r0, r5, #25
 80058aa:	d5fb      	bpl.n	80058a4 <_printf_i+0x1bc>
 80058ac:	8019      	strh	r1, [r3, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	4616      	mov	r6, r2
 80058b4:	e7bc      	b.n	8005830 <_printf_i+0x148>
 80058b6:	6833      	ldr	r3, [r6, #0]
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	6032      	str	r2, [r6, #0]
 80058bc:	681e      	ldr	r6, [r3, #0]
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	2100      	movs	r1, #0
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7fa fc8c 	bl	80001e0 <memchr>
 80058c8:	b108      	cbz	r0, 80058ce <_printf_i+0x1e6>
 80058ca:	1b80      	subs	r0, r0, r6
 80058cc:	6060      	str	r0, [r4, #4]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	2300      	movs	r3, #0
 80058d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058d8:	e7aa      	b.n	8005830 <_printf_i+0x148>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	4632      	mov	r2, r6
 80058de:	4649      	mov	r1, r9
 80058e0:	4640      	mov	r0, r8
 80058e2:	47d0      	blx	sl
 80058e4:	3001      	adds	r0, #1
 80058e6:	d0ad      	beq.n	8005844 <_printf_i+0x15c>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	079b      	lsls	r3, r3, #30
 80058ec:	d413      	bmi.n	8005916 <_printf_i+0x22e>
 80058ee:	68e0      	ldr	r0, [r4, #12]
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	4298      	cmp	r0, r3
 80058f4:	bfb8      	it	lt
 80058f6:	4618      	movlt	r0, r3
 80058f8:	e7a6      	b.n	8005848 <_printf_i+0x160>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4632      	mov	r2, r6
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	47d0      	blx	sl
 8005904:	3001      	adds	r0, #1
 8005906:	d09d      	beq.n	8005844 <_printf_i+0x15c>
 8005908:	3501      	adds	r5, #1
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	9903      	ldr	r1, [sp, #12]
 800590e:	1a5b      	subs	r3, r3, r1
 8005910:	42ab      	cmp	r3, r5
 8005912:	dcf2      	bgt.n	80058fa <_printf_i+0x212>
 8005914:	e7eb      	b.n	80058ee <_printf_i+0x206>
 8005916:	2500      	movs	r5, #0
 8005918:	f104 0619 	add.w	r6, r4, #25
 800591c:	e7f5      	b.n	800590a <_printf_i+0x222>
 800591e:	bf00      	nop
 8005920:	08005dd3 	.word	0x08005dd3
 8005924:	08005de4 	.word	0x08005de4

08005928 <__swbuf_r>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	460e      	mov	r6, r1
 800592c:	4614      	mov	r4, r2
 800592e:	4605      	mov	r5, r0
 8005930:	b118      	cbz	r0, 800593a <__swbuf_r+0x12>
 8005932:	6a03      	ldr	r3, [r0, #32]
 8005934:	b90b      	cbnz	r3, 800593a <__swbuf_r+0x12>
 8005936:	f7ff f9e3 	bl	8004d00 <__sinit>
 800593a:	69a3      	ldr	r3, [r4, #24]
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	071a      	lsls	r2, r3, #28
 8005942:	d501      	bpl.n	8005948 <__swbuf_r+0x20>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	b943      	cbnz	r3, 800595a <__swbuf_r+0x32>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f82a 	bl	80059a4 <__swsetup_r>
 8005950:	b118      	cbz	r0, 800595a <__swbuf_r+0x32>
 8005952:	f04f 37ff 	mov.w	r7, #4294967295
 8005956:	4638      	mov	r0, r7
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	1a98      	subs	r0, r3, r2
 8005960:	6963      	ldr	r3, [r4, #20]
 8005962:	b2f6      	uxtb	r6, r6
 8005964:	4283      	cmp	r3, r0
 8005966:	4637      	mov	r7, r6
 8005968:	dc05      	bgt.n	8005976 <__swbuf_r+0x4e>
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f7ff fcbb 	bl	80052e8 <_fflush_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	d1ed      	bne.n	8005952 <__swbuf_r+0x2a>
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	3b01      	subs	r3, #1
 800597a:	60a3      	str	r3, [r4, #8]
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	6022      	str	r2, [r4, #0]
 8005982:	701e      	strb	r6, [r3, #0]
 8005984:	6962      	ldr	r2, [r4, #20]
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	429a      	cmp	r2, r3
 800598a:	d004      	beq.n	8005996 <__swbuf_r+0x6e>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	07db      	lsls	r3, r3, #31
 8005990:	d5e1      	bpl.n	8005956 <__swbuf_r+0x2e>
 8005992:	2e0a      	cmp	r6, #10
 8005994:	d1df      	bne.n	8005956 <__swbuf_r+0x2e>
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f7ff fca5 	bl	80052e8 <_fflush_r>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d0d9      	beq.n	8005956 <__swbuf_r+0x2e>
 80059a2:	e7d6      	b.n	8005952 <__swbuf_r+0x2a>

080059a4 <__swsetup_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4b29      	ldr	r3, [pc, #164]	@ (8005a4c <__swsetup_r+0xa8>)
 80059a8:	4605      	mov	r5, r0
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	460c      	mov	r4, r1
 80059ae:	b118      	cbz	r0, 80059b8 <__swsetup_r+0x14>
 80059b0:	6a03      	ldr	r3, [r0, #32]
 80059b2:	b90b      	cbnz	r3, 80059b8 <__swsetup_r+0x14>
 80059b4:	f7ff f9a4 	bl	8004d00 <__sinit>
 80059b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059bc:	0719      	lsls	r1, r3, #28
 80059be:	d422      	bmi.n	8005a06 <__swsetup_r+0x62>
 80059c0:	06da      	lsls	r2, r3, #27
 80059c2:	d407      	bmi.n	80059d4 <__swsetup_r+0x30>
 80059c4:	2209      	movs	r2, #9
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	f04f 30ff 	mov.w	r0, #4294967295
 80059d2:	e033      	b.n	8005a3c <__swsetup_r+0x98>
 80059d4:	0758      	lsls	r0, r3, #29
 80059d6:	d512      	bpl.n	80059fe <__swsetup_r+0x5a>
 80059d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059da:	b141      	cbz	r1, 80059ee <__swsetup_r+0x4a>
 80059dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d002      	beq.n	80059ea <__swsetup_r+0x46>
 80059e4:	4628      	mov	r0, r5
 80059e6:	f7ff fafb 	bl	8004fe0 <_free_r>
 80059ea:	2300      	movs	r3, #0
 80059ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	6063      	str	r3, [r4, #4]
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f043 0308 	orr.w	r3, r3, #8
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	b94b      	cbnz	r3, 8005a1e <__swsetup_r+0x7a>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a14:	d003      	beq.n	8005a1e <__swsetup_r+0x7a>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f883 	bl	8005b24 <__smakebuf_r>
 8005a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a22:	f013 0201 	ands.w	r2, r3, #1
 8005a26:	d00a      	beq.n	8005a3e <__swsetup_r+0x9a>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	60a2      	str	r2, [r4, #8]
 8005a2c:	6962      	ldr	r2, [r4, #20]
 8005a2e:	4252      	negs	r2, r2
 8005a30:	61a2      	str	r2, [r4, #24]
 8005a32:	6922      	ldr	r2, [r4, #16]
 8005a34:	b942      	cbnz	r2, 8005a48 <__swsetup_r+0xa4>
 8005a36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a3a:	d1c5      	bne.n	80059c8 <__swsetup_r+0x24>
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
 8005a3e:	0799      	lsls	r1, r3, #30
 8005a40:	bf58      	it	pl
 8005a42:	6962      	ldrpl	r2, [r4, #20]
 8005a44:	60a2      	str	r2, [r4, #8]
 8005a46:	e7f4      	b.n	8005a32 <__swsetup_r+0x8e>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e7f7      	b.n	8005a3c <__swsetup_r+0x98>
 8005a4c:	20000018 	.word	0x20000018

08005a50 <_raise_r>:
 8005a50:	291f      	cmp	r1, #31
 8005a52:	b538      	push	{r3, r4, r5, lr}
 8005a54:	4605      	mov	r5, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	d904      	bls.n	8005a64 <_raise_r+0x14>
 8005a5a:	2316      	movs	r3, #22
 8005a5c:	6003      	str	r3, [r0, #0]
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a66:	b112      	cbz	r2, 8005a6e <_raise_r+0x1e>
 8005a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a6c:	b94b      	cbnz	r3, 8005a82 <_raise_r+0x32>
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 f830 	bl	8005ad4 <_getpid_r>
 8005a74:	4622      	mov	r2, r4
 8005a76:	4601      	mov	r1, r0
 8005a78:	4628      	mov	r0, r5
 8005a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a7e:	f000 b817 	b.w	8005ab0 <_kill_r>
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d00a      	beq.n	8005a9c <_raise_r+0x4c>
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	d103      	bne.n	8005a92 <_raise_r+0x42>
 8005a8a:	2316      	movs	r3, #22
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e7e7      	b.n	8005a62 <_raise_r+0x12>
 8005a92:	2100      	movs	r1, #0
 8005a94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4798      	blx	r3
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7e0      	b.n	8005a62 <_raise_r+0x12>

08005aa0 <raise>:
 8005aa0:	4b02      	ldr	r3, [pc, #8]	@ (8005aac <raise+0xc>)
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	f7ff bfd3 	b.w	8005a50 <_raise_r>
 8005aaa:	bf00      	nop
 8005aac:	20000018 	.word	0x20000018

08005ab0 <_kill_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_kill_r+0x20>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	f7fb fa2b 	bl	8000f18 <_kill>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d102      	bne.n	8005acc <_kill_r+0x1c>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	b103      	cbz	r3, 8005acc <_kill_r+0x1c>
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000334 	.word	0x20000334

08005ad4 <_getpid_r>:
 8005ad4:	f7fb ba18 	b.w	8000f08 <_getpid>

08005ad8 <__swhatbuf_r>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	460c      	mov	r4, r1
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	b096      	sub	sp, #88	@ 0x58
 8005ae4:	4615      	mov	r5, r2
 8005ae6:	461e      	mov	r6, r3
 8005ae8:	da0d      	bge.n	8005b06 <__swhatbuf_r+0x2e>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005af0:	f04f 0100 	mov.w	r1, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2340      	movne	r3, #64	@ 0x40
 8005af8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005afc:	2000      	movs	r0, #0
 8005afe:	6031      	str	r1, [r6, #0]
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	b016      	add	sp, #88	@ 0x58
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	466a      	mov	r2, sp
 8005b08:	f000 f848 	bl	8005b9c <_fstat_r>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	dbec      	blt.n	8005aea <__swhatbuf_r+0x12>
 8005b10:	9901      	ldr	r1, [sp, #4]
 8005b12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b1a:	4259      	negs	r1, r3
 8005b1c:	4159      	adcs	r1, r3
 8005b1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b22:	e7eb      	b.n	8005afc <__swhatbuf_r+0x24>

08005b24 <__smakebuf_r>:
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b28:	079d      	lsls	r5, r3, #30
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	d507      	bpl.n	8005b40 <__smakebuf_r+0x1c>
 8005b30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	6163      	str	r3, [r4, #20]
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b40:	ab01      	add	r3, sp, #4
 8005b42:	466a      	mov	r2, sp
 8005b44:	f7ff ffc8 	bl	8005ad8 <__swhatbuf_r>
 8005b48:	9f00      	ldr	r7, [sp, #0]
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff faba 	bl	80050c8 <_malloc_r>
 8005b54:	b948      	cbnz	r0, 8005b6a <__smakebuf_r+0x46>
 8005b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5a:	059a      	lsls	r2, r3, #22
 8005b5c:	d4ee      	bmi.n	8005b3c <__smakebuf_r+0x18>
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	e7e2      	b.n	8005b30 <__smakebuf_r+0xc>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	6020      	str	r0, [r4, #0]
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b7a:	b15b      	cbz	r3, 8005b94 <__smakebuf_r+0x70>
 8005b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f81d 	bl	8005bc0 <_isatty_r>
 8005b86:	b128      	cbz	r0, 8005b94 <__smakebuf_r+0x70>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	431d      	orrs	r5, r3
 8005b98:	81a5      	strh	r5, [r4, #12]
 8005b9a:	e7cf      	b.n	8005b3c <__smakebuf_r+0x18>

08005b9c <_fstat_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	@ (8005bbc <_fstat_r+0x20>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	f7fb fa15 	bl	8000fd8 <_fstat>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	d102      	bne.n	8005bb8 <_fstat_r+0x1c>
 8005bb2:	682b      	ldr	r3, [r5, #0]
 8005bb4:	b103      	cbz	r3, 8005bb8 <_fstat_r+0x1c>
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000334 	.word	0x20000334

08005bc0 <_isatty_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d06      	ldr	r5, [pc, #24]	@ (8005bdc <_isatty_r+0x1c>)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	f7fb fa14 	bl	8000ff8 <_isatty>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_isatty_r+0x1a>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_isatty_r+0x1a>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	20000334 	.word	0x20000334

08005be0 <_init>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr

08005bec <_fini>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr
